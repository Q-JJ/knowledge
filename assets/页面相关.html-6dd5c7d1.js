import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as e,f as a}from"./app-131d0148.js";const d={},c=a('<h1 id="页面相关" tabindex="-1"><a class="header-anchor" href="#页面相关" aria-hidden="true">#</a> 页面相关</h1><h2 id="网页生成过程" tabindex="-1"><a class="header-anchor" href="#网页生成过程" aria-hidden="true">#</a> 网页生成过程</h2><ul><li><code>HTML</code>被HTML解析器解析成<code>DOM</code> 树</li><li><code>css</code>则被css解析器解析成<code>CSSOM </code>树</li><li>结合<code>DOM</code>树和<code>CSSOM</code>树，生成一棵渲染树(<code>Render Tree</code>)</li><li>生成布局（<code>flow</code>），即将所有渲染树的所有节点进行平面合成</li><li>将布局绘制（<code>paint</code>）在屏幕上</li></ul><h2 id="输入url到页面加载的全过程" tabindex="-1"><a class="header-anchor" href="#输入url到页面加载的全过程" aria-hidden="true">#</a> 输入URL到页面加载的全过程</h2><ol><li>首先在浏览器中输入URL并回车</li><li>浏览器查找当前URL是否存在缓存（查看浏览器缓存-系统缓存-路由缓存），并比较缓存是否过期。有则显示页面内容，没有下一步</li><li>DNS解析URL对应IP。DNS服务器是基于UDP的，因此会用到UDP协议。</li><li>建立TCP连接，三次握手</li><li>发送http请求</li><li>服务器响应请求并返回结果</li><li>关闭TCP连接，四次挥手</li><li>浏览器解析并渲染页面</li><li>生成DOM树，解析CSS与JS</li><li>客户端与服务器交互</li><li>ajax查询</li></ol><h2 id="spa单页面" tabindex="-1"><a class="header-anchor" href="#spa单页面" aria-hidden="true">#</a> SPA单页面</h2><p>SPA仅在 web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。</p><p>一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI与用户的交互，避免页面的重新加载。</p><p>优点：</p><ul><li>代码复用</li><li>用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；</li><li>SPA 相对对服务器压力小;</li><li>前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理;</li></ul><p>缺点：</p><ul><li>初次加载耗时多：为实现单页 web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、Css 统一加载，部分页面按需加载;</li><li>前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；</li><li>SEO 难度较大</li><li>较高的内存占用</li></ul><h2 id="页面性能优化" tabindex="-1"><a class="header-anchor" href="#页面性能优化" aria-hidden="true">#</a> 页面性能优化</h2><ul><li><p>资源压缩合并，减少http请求</p><ul><li>合并图片（css sprites）、CSS和JS文件合并、CSS和JS文件压缩</li><li>使用 lazyLoad 等技术进行优化。</li><li>精灵图</li></ul></li><li><p><strong>非核心代码异步加载</strong> --&gt; 异步加载的方式 --&gt; 异步加载的区别</p><ul><li>动态脚本加载</li><li>defer</li><li>async（H5）</li><li>defer和async的区别 <ul><li>defer：在HTML解析完之后才会执行。如果是多个，则按照加载的顺序依次执行。</li><li>async：在加载完之后立即执行。如果是多个，执行顺序和加载顺序无关。</li></ul></li></ul></li><li><p>利用浏览器缓存 --&gt; 缓存的分类 --&gt; 缓存的原理</p><ul><li>强缓存：不用请求服务器，直接使用本地的缓存。</li><li>协商缓存：浏览器发现本地有资源的副本，但是不太确定要不要使用，于是去问问服务器。</li></ul></li><li><p>使用CDN：浏览器第一次打开页面的时候，浏览器缓存是起不了作任何用的</p></li><li><p>DNS预解析：告诉浏览器未来可能从某个 URL 获取资源，当浏览器真正使用到该域中的某个资源时就可以尽快地完成 DNS 解析。</p></li></ul>',14),r=[c];function o(t,s){return i(),e("div",null,r)}const p=l(d,[["render",o],["__file","页面相关.html.vue"]]);export{p as default};
