import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as e,c as p,e as o,f as n}from"./app-131d0148.js";const l={},c=n(`<h1 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h1><h2 id="_1-data-与-el-的-2-种写法" tabindex="-1"><a class="header-anchor" href="#_1-data-与-el-的-2-种写法" aria-hidden="true">#</a> 1. data 与 el 的 2 种写法</h2><p>el 有 2 种写法</p><ol><li><p>new Vue 时候配置 el 属性。</p></li><li><p>先创建 Vue 实例，随后再通过 vm.$mount(&#39;#root&#39;)指定 el 的值。</p></li></ol><p>data 有 2 种写法</p><ol><li><p>对象式</p></li><li><p><strong>函数式</strong></p></li></ol><p style="background-color:#dfeefd;padding:10px;border-radius:10px;">一个重要的原则：由 Vue 管理的函数，一定不要写箭头函数，一旦写了箭头函数，this 就不再是 Vue 实例了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span> <span class="token comment">//第一种写法</span>
			vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">)</span> <span class="token comment">//第二种写法</span>
			<span class="token comment">//data的第一种写法：对象式</span>
			 <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
				<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;湫&#39;</span>
			<span class="token punctuation">}</span>
			<span class="token comment">//data的第二种写法：函数式（！常用）</span>
			<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;@@@&#39;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//此处的this是Vue实例对象</span>
				<span class="token keyword">return</span><span class="token punctuation">{</span>
					<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;湫&#39;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_2-指令语法" tabindex="-1"><a class="header-anchor" href="#_2-指令语法" aria-hidden="true">#</a> 2.指令语法</h2><p>插值语法：用于解析标签体内容。</p><p>写法：<code>{{xxx}}</code>，xxx 是 js 表达式，且可以直接读取到 data 中的所有属性。</p><p>指令语法：用于解析标签（包括：标签属性、标签体内容、绑定事件.....）。<br> 举例：v-bind:href=&quot;xxx&quot; 或 简写为 :href=&quot;xxx&quot;，xxx 同样要写 js 表达式， 且可以直接读取到 data 中的所有属性。</p><h3 id="内容渲染指令" tabindex="-1"><a class="header-anchor" href="#内容渲染指令" aria-hidden="true">#</a> 内容渲染指令</h3><ol><li><code>v-text</code> 指令的缺点：会覆盖元素内部原有的内容！</li><li><code>v-html</code> 指令的作用：可以把带有标签的字符串，渲染成真正的 HTML 内容！</li></ol><h3 id="条件-列表渲染指令-常用" tabindex="-1"><a class="header-anchor" href="#条件-列表渲染指令-常用" aria-hidden="true">#</a> 条件/列表渲染指令(常用)</h3><ol><li><p><code>v-show</code> 的原理是：动态为元素添加或移除 <code>display: none</code> 样式，来实现元素的显示和隐藏</p><ul><li>如果要频繁的切换元素的显示状态，用 v-show 性能会更好</li></ul></li><li><p><code>v-if</code> 的原理是：每次动态创建或移除元素，实现元素的显示和隐藏</p><ul><li>如果刚进入页面的时候，某些元素默认不需要被展示，而且后期这个元素很可能也不需要被展示出来，此时 v-if 性能更好</li></ul></li><li><p><code>v-for</code>:一个数组来渲染一个列表。v-for 指令需要使用 item in items 形式的特殊语法，其中 items 是源数据数组，而 item 则是被迭代的数组元素的别名。建议设置key值，并且保证每个key值是独一无二的，这便于diff算法进行优化。</p></li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span>  <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in items<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 内容 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">v-for和v-if</p><p>v-for是条件渲染，v-if是列表渲染；</p><p>在同一个标签上，使用这两个关键指令时，由于v-for的优先级<mark>高</mark>于v-if ,在v-for没次迭代时，也会执行一次v-if，这样耗费更多的计算开销，而影响计算机性能；</p><p>如果项目中必须使用两个，v-if和v-for则不要以同级的形式：在外层嵌套template（页面渲染不生成dom节点），在这一层进行v-if判断，然后在内部进行v-for循环。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isShow<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in items<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p style="background-color:#dfeefd;padding:10px;border-radius:10px;">也可以通过computed计算属性先过滤掉不需要的数据，在通过v-for循环</p></div><h3 id="数据绑定指令" tabindex="-1"><a class="header-anchor" href="#数据绑定指令" aria-hidden="true">#</a> 数据绑定指令</h3><ol><li>单向绑定(v-bind)：数据只能从 data 流向页面。简写是英文的 <code>:</code></li><li>双向绑定(v-model)：数据不仅能从 data 流向页面，还可以从页面流向 data。</li><li>双向绑定一般都应用在表单类元素上（如：input、select 等）</li><li>v-model:value 可以简写为 v-model，因为 v-model 默认收集的就是 value 值。</li></ol>`,21),i=n(`<blockquote><p>注意：插值表达式只能用在元素的<strong>内容节点</strong>中，不能用在元素的<strong>属性节点</strong>中！</p></blockquote><h3 id="事件绑定指令" tabindex="-1"><a class="header-anchor" href="#事件绑定指令" aria-hidden="true">#</a> 事件绑定指令</h3><ol><li><code>v-on:</code> 简写是 <code>@</code></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">&gt;</span>
			<span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;showInfo2($event,66)&quot;</span><span class="token operator">&gt;</span>点我提示信息<span class="token number">2</span>（传参）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>
<span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
				<span class="token function">showInfo2</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span>number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
					console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span>number<span class="token punctuation">)</span>
					<span class="token comment">// console.log(this) //此处的this是vm</span>
					<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;你好！！&#39;</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ol><li>事件的回调需要配置在 methods 对象中，最终会在 vm 上；</li><li>methods 中配置的函数，不要用箭头函数！否则 this 就不是 vm 了；</li><li>methods 中配置的函数，都是被 Vue 所管理的函数，this 的指向是 vm 或 组件实例对象；</li><li>@click=&quot;demo&quot; 和 @click=&quot;demo($event)&quot; 效果一致，但后者可以传参；</li></ol></blockquote><ol start="2"><li><code>$event</code> 的应用场景：如果默认的事件对象 e 被覆盖了，则可以手动传递一个 $event。例如：</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>add(3, $event)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

methods: {
   add(n, e) {
			// 如果在方法中要修改 data 中的数据，可以通过 this 访问到
			this.count += 1
   }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><p>事件修饰符</p><ul><li><p><code>.prevent</code>：阻止默认事件（常用）</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>.stop</code>：阻止事件冒泡（常用）</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><ul><li><p><code>once</code>：事件只触发一次（常用）</p></li><li><p><code>capture</code>：使用事件的捕获模式；</p></li><li><p><code>self</code>：只有 event.target 是当前操作的元素时才触发事件；</p></li><li><p><code>passive</code>：事件的默认行为立即执行，无需等待事件回调执行完毕。</p></li></ul></li><li><p>键盘事件(仅列举常用的)</p><ul><li>回车 =&gt; enter</li><li>删除 =&gt; delete (捕获“删除”和“退格”键)</li><li>退出 =&gt; esc</li></ul></li></ol><p style="background-color:#dfeefd;padding:10px;border-radius:10px;">Vue未提供别名的按键，使用按键原始的 key 值去绑定，但须转为 kebab-case（短横线命名）</p><ol start="5"><li>Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Vue.config.keyCodes.huiche = 13 //定义了一个别名按键
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-绑定样式" tabindex="-1"><a class="header-anchor" href="#_3-绑定样式" aria-hidden="true">#</a> 3. 绑定样式</h2><ol><li><p>class 样式</p><p>写法<code>:class=&quot;xxx&quot;</code> ，xxx 可以是字符串、对象、数组。</p><p>字符串写法适用于：类名不确定，要动态获取。</p><p>对象写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>basic<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>classObj<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#root&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">classObj</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">atguigu1</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token literal-property property">atguigu2</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组写法适用于：要绑定多个样式，个数不确定，名字也不确定。</p></li><li><p>style</p><p><code>:style=&quot;xxx&quot;</code>，其中 xxx 是动态值。</p><p><code>:style=&quot;[a,b]&quot;</code>，其中 a、b 是样式对象。</p></li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>basic<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>styleObj<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- 绑定style样式--数组写法 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>basic<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>styleArr<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#root&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">styleObj</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&quot;40px&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">styleArr</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&quot;40px&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">&quot;gray&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function u(r,d){const s=t("VuePlayground");return e(),p("div",null,[c,o(s,{title:"Vue%20%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A",key:"48604570",settings:"%7B%7D",files:"eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiB9IGZyb20gXCJ2dWVcIjtcbi8vIOS4iuS4i%2BmDveWwneivlei%2Bk%2BWFpSAtLT5cbmNvbnN0IG5hbWUgPSByZWYoXCLmuatcIik7XG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGlkPVwicm9vdFwiPlxuICAgIOWNleWQkeaVsOaNrue7keWumu%2B8mjxpbnB1dCB0eXBlPVwidGV4dFwiIDp2YWx1ZT1cIm5hbWVcIiAvPjxiciAvPlxuICAgIOWPjOWQkeaVsOaNrue7keWumu%2B8mjxpbnB1dCB0eXBlPVwidGV4dFwiIHYtbW9kZWw9XCJuYW1lXCIgLz48YnIgLz5cbiAgICA8IS0tIHYtbW9kZWzlj6rog73lupTnlKjlnKjooajljZXnsbvlhYPntKDvvIjovpPlhaXnsbvlhYPntKDvvInkuIogLS0%2BXG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbiJ9"}),i])}const m=a(l,[["render",u],["__file","基础.html.vue"]]);export{m as default};
