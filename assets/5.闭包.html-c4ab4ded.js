import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,f as l}from"./app-131d0148.js";const t={},p=l('<h1 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h1><p>闭包是指有权访问另一个函数作用域中的变量的函数。</p><ul><li><p>优点：延长局部变量的生命周期</p></li><li><p>缺点：我们尽可能减少使用闭包，因为它会消耗内存。过多的闭包可能会导致内存泄漏</p></li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在js中变量的作用域属于函数作用域, 在函数执行完后,作用域就会被清理,内存也会随之被回收;</p><p>但是由于闭包函数是建立在函数内部的子函数, 由于其可访问上级作用域,即使上级函数执行完, 作用域也不会随之销毁, 这时的子函数(也就是闭包),便拥有了访问上级作用域中变量的权限,即使上级函数执行完后作用域内的值也不会被销毁。</p></div><h2 id="闭包的特性" tabindex="-1"><a class="header-anchor" href="#闭包的特性" aria-hidden="true">#</a> 闭包的特性</h2><ul><li><p>内部函数可以访问定义他们外部函数的参数和变量</p></li><li><p>闭包是密闭的容器，类似于set、map容器，存储数据的</p></li><li><p>闭包是一个对象，存放数据的格式为 key-value 形式</p></li><li><p>函数嵌套函数</p></li><li><p>本质是将函数内部和外部连接起来。优点是可以读取函数内部的变量，让这些变量的值始终保存在内存中，不会在函数被调用之后自动清除</p></li><li><p>使用场景主要有返回值、函数赋值、自执行函数、迭代器等等。发送ajax请求成功/失败的回调;setTimeout的延时回调;或者一个函数内部返回另一个匿名函数,这些都是闭包的应用。</p></li></ul>',6),n=[p];function r(c,s){return e(),a("div",null,n)}const d=i(t,[["render",r],["__file","5.闭包.html.vue"]]);export{d as default};
