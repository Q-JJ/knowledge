const a=JSON.parse(`{"key":"v-b0c1e768","path":"/qianduan/%E5%9F%BA%E7%A1%80/JS/7.%E5%8E%9F%E5%9E%8B__%E5%8E%9F%E5%9E%8B%E9%93%BE.html","title":"原型 && 原型链","lang":"zh-CN","frontmatter":{"order":7,"headerDepth":3,"date":"2022-07-23T00:00:00.000Z","readingTime":"N/A","word":"N/A","lastUpdated":true,"article":false,"description":"原型 &amp;&amp; 原型链 原型链的基本原理：任何一个实例，通过原型链，找到它上面的原型，该原型对象中的方法和属性，可以被所有的原型实例共享。 面向对象的三大特性：封装、继承、多态 创建对象的3种方式 字面量：var obj = new Object(name:\\"J\\"); 构造函数 var M = function (name) { this.name = name; } var obj3 = new M('smyhvae'); Object.create var p = {name:'smyhvae'}; var obj3 = Object.create(p); //此方法创建的对象，是用原型链连接的","head":[["meta",{"property":"og:url","content":"https://q-jj.github.io/knowledge/knowledge/qianduan/%E5%9F%BA%E7%A1%80/JS/7.%E5%8E%9F%E5%9E%8B__%E5%8E%9F%E5%9E%8B%E9%93%BE.html"}],["meta",{"property":"og:site_name","content":"湫的知识海洋"}],["meta",{"property":"og:title","content":"原型 && 原型链"}],["meta",{"property":"og:description","content":"原型 &amp;&amp; 原型链 原型链的基本原理：任何一个实例，通过原型链，找到它上面的原型，该原型对象中的方法和属性，可以被所有的原型实例共享。 面向对象的三大特性：封装、继承、多态 创建对象的3种方式 字面量：var obj = new Object(name:\\"J\\"); 构造函数 var M = function (name) { this.name = name; } var obj3 = new M('smyhvae'); Object.create var p = {name:'smyhvae'}; var obj3 = Object.create(p); //此方法创建的对象，是用原型链连接的"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-29T03:52:20.000Z"}],["meta",{"property":"article:author","content":"Yivn"}],["meta",{"property":"article:published_time","content":"2022-07-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-29T03:52:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"原型 && 原型链\\",\\"description\\":\\"原型 &amp;&amp; 原型链 原型链的基本原理：任何一个实例，通过原型链，找到它上面的原型，该原型对象中的方法和属性，可以被所有的原型实例共享。 面向对象的三大特性：封装、继承、多态 创建对象的3种方式 字面量：var obj = new Object(name:\\\\\\"J\\\\\\"); 构造函数 var M = function (name) { this.name = name; } var obj3 = new M('smyhvae'); Object.create var p = {name:'smyhvae'}; var obj3 = Object.create(p); //此方法创建的对象，是用原型链连接的\\"}"]]},"headers":[],"git":{"createdTime":1703821940000,"updatedTime":1703821940000,"contributors":[{"name":"Q-JJ","email":"J001222@163.com","commits":1}]},"readingTime":{"minutes":0.82,"words":247},"filePathRelative":"qianduan/基础/JS/7.原型&&原型链.md","localizedDate":"2022年7月23日","excerpt":"<h1> 原型 &amp;&amp; 原型链</h1>\\n<p><strong>原型链的基本原理</strong>：任何一个<strong>实例</strong>，通过原型链，找到它上面的<strong>原型</strong>，该原型对象中的方法和属性，可以被所有的原型实例共享。</p>\\n<ol>\\n<li>\\n<p>面向对象的三大特性：封装、继承、多态</p>\\n</li>\\n<li>\\n<p>创建对象的3种方式</p>\\n<ol>\\n<li>\\n<p>字面量：var obj = new Object(name:\\"J\\");</p>\\n</li>\\n<li>\\n<p>构造函数</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">M</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">name</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> name<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">var</span> obj3 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">M</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'smyhvae'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>Object.create</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> p <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span><span class=\\"token string\\">'smyhvae'</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">var</span> obj3 <span class=\\"token operator\\">=</span> Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">//此方法创建的对象，是用原型链连接的</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ol>\\n</li>\\n</ol>","autoDesc":true}`);export{a as data};
