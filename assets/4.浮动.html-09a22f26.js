import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,f as e}from"./app-131d0148.js";const p={},t=e(`<h1 id="css浮动" tabindex="-1"><a class="header-anchor" href="#css浮动" aria-hidden="true">#</a> CSS浮动</h1><h2 id="传统网页布局的三种方式" tabindex="-1"><a class="header-anchor" href="#传统网页布局的三种方式" aria-hidden="true">#</a> 传统网页布局的三种方式</h2><p>​ CSS 提供了三种传统布局方式(简单说,就是盒子如何进行排列顺序)：</p><ul><li><p>普通流（标准流）</p></li><li><p>浮动</p></li><li><p>定位</p></li></ul><h2 id="标准流-普通流-文档流" tabindex="-1"><a class="header-anchor" href="#标准流-普通流-文档流" aria-hidden="true">#</a> 标准流（普通流/文档流）</h2><p>所谓的标准流: 就是标签按照规定好默认方式排列</p><ol><li>块级元素会独占一行，从上向下顺序排列。常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li><li>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。常用元素：span、a、i、em 等</li></ol><p>css 中一共有三种手段，使一个元素脱离标准文档流：</p><ul><li>（1）浮动</li><li>（2）绝对定位</li><li>（3）固定定位</li></ul><figure><img src="http://img.smyhvae.com/20170729_1545.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="浮动" tabindex="-1"><a class="header-anchor" href="#浮动" aria-hidden="true">#</a> 浮动</h2><p>​float 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">选择器</span> <span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="浮动的用处" tabindex="-1"><a class="header-anchor" href="#浮动的用处" aria-hidden="true">#</a> 浮动的用处</h3><p>​ 总结：有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。 因为浮动可以改变元素标签默认的排列方式.</p><p>浮动可以让多个块级元素一行内排列显示。</p><h3 id="浮动特性" tabindex="-1"><a class="header-anchor" href="#浮动特性" aria-hidden="true">#</a> 浮动特性</h3><p>加了浮动之后的元素:</p><p>1、浮动元素会脱离标准流(脱标：浮动的盒子不再保留原先的位置)</p><p>2、浮动的元素会一行内显示并且元素顶部对齐</p><div class="hint-container warning"><p class="hint-container-title">注意</p><ol><li><p>浮动的元素是互相贴靠在一起的，如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</p></li><li><p>浮动的元素会具有行内块元素的特性，如：一个浮动的元素，如果没有设置 width，那么将自动收缩为内容的宽度</p></li><li><p>浮动的盒子中间是没有缝隙的</p></li><li><p>标准流中的文字不会被浮动的盒子遮挡住</p></li><li><p>永远不是一个东西单独浮动，浮动都是一起浮动</p></li><li><p>浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流.</p></li></ol></div><h2 id="清除浮动" tabindex="-1"><a class="header-anchor" href="#清除浮动" aria-hidden="true">#</a> 清除浮动</h2><h3 id="清除浮动的意义" tabindex="-1"><a class="header-anchor" href="#清除浮动的意义" aria-hidden="true">#</a> 清除浮动的意义</h3><p>​ 由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的标准流盒子。</p><h3 id="清除浮动的多种方式" tabindex="-1"><a class="header-anchor" href="#清除浮动的多种方式" aria-hidden="true">#</a> 清除浮动的多种方式</h3><ol><li><p>给浮动元素的祖先元素加高度</p></li><li><p>clear:both（不允许左侧和右侧有浮动对象。问题：它所在的标签，margin 属性失效了）</p></li></ol><h4 id="_1-隔墙法" tabindex="-1"><a class="header-anchor" href="#_1-隔墙法" aria-hidden="true">#</a> 1.隔墙法</h4><p>额外标签法也称为隔墙法，是 W3C 推荐的做法。</p><p>使用方式：</p><p>​ 额外标签法会在浮动元素末尾添加一个空的标签。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>例如
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">clear</span><span class="token punctuation">:</span>both</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
，或者其他标签（如<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>等）。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 优点： 通俗易懂，书写方便</p><p>​ 缺点： 添加许多无意义的标签，结构化较差</p><p>​ 注意： 要求这个新的空标签必须是块级元素。</p><h4 id="_2-父级添加-overflow-属性" tabindex="-1"><a class="header-anchor" href="#_2-父级添加-overflow-属性" aria-hidden="true">#</a> 2.父级添加 overflow 属性</h4><p>可以给父级添加 overflow 属性，将其属性值设置为 hidden、 auto 或 scroll 。</p><p>例如：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">overflow</span><span class="token punctuation">:</span> hidden | auto | scroll<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>优点：代码简洁</p><p>缺点：无法显示溢出的部分</p><p>注意：是给父元素添加代码</p><h4 id="_3-父级添加-after-伪元素" tabindex="-1"><a class="header-anchor" href="#_3-父级添加-after-伪元素" aria-hidden="true">#</a> 3.父级添加 after 伪元素</h4><p>:after 方式是额外标签法的升级版。给父元素添加：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.clearfix</span> <span class="token punctuation">{</span>
  <span class="token comment">/* IE6、7 专有 */</span>
  *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点：没有增加标签，结构更简单</p><h4 id="_4-父级添加双伪元素" tabindex="-1"><a class="header-anchor" href="#_4-父级添加双伪元素" aria-hidden="true">#</a> 4.父级添加双伪元素</h4><p>给父元素添加</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.clearfix:before,
.clearfix:after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.clearfix</span> <span class="token punctuation">{</span>
  *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点：代码更简洁</p>`,49),i=[t];function l(c,o){return n(),s("div",null,i)}const u=a(p,[["render",l],["__file","4.浮动.html.vue"]]);export{u as default};
