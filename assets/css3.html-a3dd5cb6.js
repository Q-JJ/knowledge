import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,f as s}from"./app-131d0148.js";const e="/knowledge/assets/image-1-85a7f8cb.png",t="/knowledge/assets/image-e086dbe4.png",l={},o=s('<h1 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h1><p>CSS 中主要的面试点</p><h2 id="css3-新功能" tabindex="-1"><a class="header-anchor" href="#css3-新功能" aria-hidden="true">#</a> CSS3 新功能</h2><p>CSS3 支持圆角、多背景、透明度、阴影、动画、图表等功能。</p><p>rem 是 css3 中新增加的一个单位属性(font size of the root element),根据页面的根节点的字体大小进行转变的单位。</p><ul><li>CSS3 渐变</li><li>CSS3 字体(@font-face 规则)、CSS3 转换和变形、2D 转换方法、3D 转换属性、CSS3 过度（transition 属性）</li><li>CSS3 动画（@keyframes 规则 animation 属性）</li><li>CSS3 多列、CSS3 盒模型、CSS3 伸缩布局盒模型(弹性盒子)（flexbox）</li><li>CSS3 多媒体查询（@media）</li><li>属性选择器；伪元素选择器（权重为 10）、结构伪类选择器（权重为 1）</li></ul><figure><img src="https://uploadfiles.nowcoder.com/images/20210605/887870227_1622863275766/DAB58BB8686B035AFFBEBDD74A2B2CA6" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>主流浏览器内核私有属性 css 前缀：</p><ul><li><p>mozilla 内核 (firefox,flock 等) -moz</p></li><li><p>webkit 内核(safari,chrome 等) -webkit</p></li><li><p>opera 内核(opera 浏览器) -o</p></li><li><p>trident 内核(ie 浏览器) -ms</p></li></ul><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h2><ul><li><p>所有元素可继承：visibility 和 cursor。</p></li><li><p>内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、direction。</p><ul><li>终端块状元素可继承：text-indent 和 text-align。</li></ul></li><li><p>列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。</p></li></ul><h2 id="link-与-import-的区别" tabindex="-1"><a class="header-anchor" href="#link-与-import-的区别" aria-hidden="true">#</a> link 与@import 的区别</h2><ol><li><p>link 是 XHTML 标签，除了加载 CSS 外，还可以定义 RSS 等其他事务；@import 属于 CSS 范畴，只能加载 CSS。</p></li><li><p>link 引用 CSS 时，在页面载入时同时加载；@import 需要页面网页完全载入以后加载。</p></li><li><p>link 是 XHTML 标签，无兼容问题；@import 是在 CSS2.1 提出的，低版本的浏览器不支持。</p></li><li><p>link 支持使用 Javascript 控制 DOM 去改变样式；而@import 不支持。😯</p></li></ol><h2 id="伪类与伪元素" tabindex="-1"><a class="header-anchor" href="#伪类与伪元素" aria-hidden="true">#</a> 伪类与伪元素</h2><ul><li><p>每条选择器最多只能包含一个伪元素；每条选择器可以包含多个伪类</p></li><li><p>伪元素的操作对象是新生成的 dom 元素，而不是原来 dom 结构里就存在的；而伪类恰好相反，伪类的操作对象是原来的 dom 结构里就存在的元素。😯</p></li><li><p>伪元素与伪类的<strong>根本区别</strong>在于：<span style="color:red;">操作的对象元素是否存在于原来的 dom 结构里</span>。</p></li></ul><figure><img src="https://uploadfiles.nowcoder.com/files/20201207/2814591_1607305247479/20201202122114203.png" alt="20201202122114203" tabindex="0" loading="lazy"><figcaption>20201202122114203</figcaption></figure><figure><img src="https://uploadfiles.nowcoder.com/files/20201207/2814591_1607305247491/20201202122048307.png" alt="20201202122048307" tabindex="0" loading="lazy"><figcaption>20201202122048307</figcaption></figure><h2 id="盒子模型" tabindex="-1"><a class="header-anchor" href="#盒子模型" aria-hidden="true">#</a> 盒子模型</h2><p>​ 盒子模型：把 HTML 页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</p><p>​ CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：<strong>边框</strong>border、<strong>外边距 margin</strong>、<strong>内边距 padding</strong>、和 <strong>实际内容 width/height</strong></p><div class="hint-container info"><p class="hint-container-title">盒子模型</p><p>在 <strong>标准盒子模型</strong>中，<strong>width 和 height 指的是内容区域</strong>的宽度和高度</p><p><strong>IE 盒子模型</strong>中，<strong>width 和 height 指的是内容区域+border+padding</strong>的宽度和高度。</p></div><figure><img src="'+e+'" alt="标准盒子模型" tabindex="0" loading="lazy"><figcaption>标准盒子模型</figcaption></figure><figure><img src="'+t+`" alt="盒子模型" tabindex="0" loading="lazy"><figcaption>盒子模型</figcaption></figure><h2 id="bfc-块级格式上下文" tabindex="-1"><a class="header-anchor" href="#bfc-块级格式上下文" aria-hidden="true">#</a> BFC（块级格式上下文）</h2><p><code>BFC</code>是一个独立的渲染区域，规定了内部 box 如何布局， 并且这个区域的子元素不会影响到外面的元素，其中比较重要的布局规则有内部 box 垂直放置，计算 BFC 的高度的时候，浮动元素也参与计算。</p><div class="hint-container info"><p class="hint-container-title">创建方式</p><ul><li>根元素，即 HTML 元素</li><li>float 的值不为 none</li><li>position 为 absolute 或 fixed</li><li>display 的值为 inline-block、table-cell、table-caption😯</li><li>overflow 的值不为 visible😯</li></ul></div><div class="hint-container info"><p class="hint-container-title">使用场景</p><ul><li>去除边距重叠现象</li><li>清除浮动（让父元素的高度包含子浮动元素）</li><li>避免某元素被浮动元素覆盖</li><li>避免多列布局由于宽度计算四舍五入而自动换行</li></ul></div><hr><h2 id="如何让一个元素水平垂直居中" tabindex="-1"><a class="header-anchor" href="#如何让一个元素水平垂直居中" aria-hidden="true">#</a> 如何让一个元素水平垂直居中</h2><ol><li>水平居中 <ul><li>对于行内元素 : <code>text-align: center</code>;</li><li>对于确定宽度的块级元素： <ul><li>width 和 margin 实现。<code>margin: 0 auto</code>;</li><li>绝对定位和 margin-left: (父 width - 子 width）/2, 前提是父元素 position: relative</li></ul></li><li>对于<span style="color:red;">未知</span>宽度的块级元素 <ul><li><code>table标签配合margin左右auto实现水平居中</code>。使用 table 标签（或直接将块级元素设值为 display:table），再通过给该标签添加左右 margin 为 auto。</li><li>inline-block 实现水平居中方法。display：inline-block 和 text-align:center 实现水平居中。😯</li><li><code>绝对定位+transform</code>，translateX 可以移动本身元素的 50%。</li><li>flex 布局使用<code>justify-content:center</code>😯</li></ul></li></ul></li><li>垂直居中 <ul><li>利用 <code>line-height</code> 实现居中，这种方法适合<strong>纯文字类</strong></li><li>通过设置父容器 相对定位 ，子级设置 <code>绝对定位</code>，top,left,bottom,right = 0 、 margin: auto 实现自适应居中 😯</li><li>弹性布局 flex :父级设置 display: flex; 子级设置 margin 为 auto 实现自适应居中 😯</li><li>父级设置相对定位，子级设置绝对定位，并且通过位移 transform 实现</li><li><code>table 布局</code>，父级通过转换成表格形式，<code>然后子级设置 vertical-align 实现</code>。（需要注意的是：😯vertical-align: middle 使用的前提条件是内联元素以及 display 值为 table-cell 的元素）。</li></ul></li></ol><h2 id="隐藏页面中某个元素的方法" tabindex="-1"><a class="header-anchor" href="#隐藏页面中某个元素的方法" aria-hidden="true">#</a> 隐藏页面中某个元素的方法</h2><ol><li><code>opacity：0</code>不会改变页面布局，并且，如果该元素已经绑定 一些事件，如 click 事件，那么点击该区域，也能触发点击事件的</li><li><code>visibility：hidden</code>不会改变页面布局，但是不会触发该元素已经绑定的事件 ，隐藏对应元素，在文档布局中仍保留原来的空间（会触发重绘）</li><li><code>display：none</code>会改变页面布局，在文档布局中不再分配空间（会触发重排+重绘）</li></ol><blockquote><p>重排：当<code>DOM</code>的变化影响了元素的几何信息。表现为重新生成布局，重新排列元素。</p><p>重绘: 当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程。改变元素的外观，不会引起网页重新生成布局 😯</p></blockquote><h2 id="清除浮动的方式-✔️" tabindex="-1"><a class="header-anchor" href="#清除浮动的方式-✔️" aria-hidden="true">#</a> 清除浮动的方式 ✔️</h2><ul><li>添加额外标签</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  //添加额外标签并且添加clear属性
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">clear</span><span class="token punctuation">:</span>both</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  //也可以加一个br标签
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>父级添加 overflow 属性，或者设置高度</li><li>建立伪类选择器清除浮动</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/*在css中添加:after伪元素*/</span>
<span class="token selector">.parent:after</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 设置添加子元素的内容是空 */</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">/* 设置添加子元素为块级元素 */</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token comment">/* 设置添加的子元素的高度0 */</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token comment">/* 设置添加子元素看不见 */</span>
  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token comment">/* 设置clear：both */</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dom-树" tabindex="-1"><a class="header-anchor" href="#dom-树" aria-hidden="true">#</a> DOM 树</h2><p>一共有 12 种节点类型，常用的有 4 种：</p><p>1、Document 类型（document 节点）——DOM 的“入口点”</p><p>2、Element 节点（元素节点）——HTML 标签，树构建块</p><p>3、Text 类型（文本节点）——包含文本</p><p>4、Comment 类型（注释节点）——有时我们可以将一些信息放入其中，它不会显示，但 JS 可以从 DOM 中读取它。</p>`,44),p=[o];function c(r,d){return a(),i("div",null,p)}const g=n(l,[["render",c],["__file","css3.html.vue"]]);export{g as default};
