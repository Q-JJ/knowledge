const e=JSON.parse('{"key":"v-230771b4","path":"/%E7%BB%8F%E9%AA%8C%E5%B0%8F%E8%AE%B0/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88%E9%87%8D%E8%A6%81%EF%BC%89/%E5%8D%81%E4%B8%87%E4%B8%AA%E4%B8%BA%E4%BB%80%E4%B9%88.html","title":"十万个为什么","lang":"zh-CN","frontmatter":{"icon":"date","order":9,"headerDepth":3,"date":"2022-07-23T00:00:00.000Z","readingTime":"N/A","word":"N/A","lastUpdated":true,"article":false,"description":"十万个为什么 data为什么是一个函数而不是对象 因为对象是一个引用类型，如果data是一个对象的情况下会造成多个组件共用一个data，data为一个函数，每个组件都会有自己的私有数据空间，不会干扰其他组件的运行。 为什么不建议用index作为key? 如果将数组下标作为key值，那么当列表发生变化时，可能会导致key值发生改变，从而引发不必要的组件重新渲染，甚至会导致性能问题。例如，当删除列表中某个元素时，其后面的所有元素的下标都会发生改变，导致Vue重新渲染整个列表。","head":[["meta",{"property":"og:url","content":"https://q-jj.github.io/knowledge/knowledge/%E7%BB%8F%E9%AA%8C%E5%B0%8F%E8%AE%B0/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88%E9%87%8D%E8%A6%81%EF%BC%89/%E5%8D%81%E4%B8%87%E4%B8%AA%E4%B8%BA%E4%BB%80%E4%B9%88.html"}],["meta",{"property":"og:site_name","content":"湫的知识海洋"}],["meta",{"property":"og:title","content":"十万个为什么"}],["meta",{"property":"og:description","content":"十万个为什么 data为什么是一个函数而不是对象 因为对象是一个引用类型，如果data是一个对象的情况下会造成多个组件共用一个data，data为一个函数，每个组件都会有自己的私有数据空间，不会干扰其他组件的运行。 为什么不建议用index作为key? 如果将数组下标作为key值，那么当列表发生变化时，可能会导致key值发生改变，从而引发不必要的组件重新渲染，甚至会导致性能问题。例如，当删除列表中某个元素时，其后面的所有元素的下标都会发生改变，导致Vue重新渲染整个列表。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-29T03:52:20.000Z"}],["meta",{"property":"article:author","content":"Yivn"}],["meta",{"property":"article:published_time","content":"2022-07-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-29T03:52:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"十万个为什么\\",\\"description\\":\\"十万个为什么 data为什么是一个函数而不是对象 因为对象是一个引用类型，如果data是一个对象的情况下会造成多个组件共用一个data，data为一个函数，每个组件都会有自己的私有数据空间，不会干扰其他组件的运行。 为什么不建议用index作为key? 如果将数组下标作为key值，那么当列表发生变化时，可能会导致key值发生改变，从而引发不必要的组件重新渲染，甚至会导致性能问题。例如，当删除列表中某个元素时，其后面的所有元素的下标都会发生改变，导致Vue重新渲染整个列表。\\"}"]]},"headers":[{"level":2,"title":"data为什么是一个函数而不是对象","slug":"data为什么是一个函数而不是对象","link":"#data为什么是一个函数而不是对象","children":[]},{"level":2,"title":"为什么不建议用index作为key?","slug":"为什么不建议用index作为key","link":"#为什么不建议用index作为key","children":[]},{"level":2,"title":"为什么v-for中建议带:key，有什么情况下是可以不带的？","slug":"为什么v-for中建议带-key-有什么情况下是可以不带的","link":"#为什么v-for中建议带-key-有什么情况下是可以不带的","children":[]},{"level":2,"title":"为什么v-for和v-if不建议用在一起","slug":"为什么v-for和v-if不建议用在一起","link":"#为什么v-for和v-if不建议用在一起","children":[]}],"git":{"createdTime":1703821940000,"updatedTime":1703821940000,"contributors":[{"name":"Q-JJ","email":"J001222@163.com","commits":1}]},"readingTime":{"minutes":4.13,"words":1239},"filePathRelative":"经验小记/前端知识整理（重要）/十万个为什么.md","localizedDate":"2022年7月23日","excerpt":"<h1> 十万个为什么</h1>\\n<h2> data为什么是一个函数而不是对象</h2>\\n<p>因为对象是一个引用类型，如果data是一个对象的情况下会造成多个组件共用一个data，data为一个函数，每个组件都会有自己的私有数据空间，不会干扰其他组件的运行。</p>\\n<h2> 为什么不建议用index作为key?</h2>\\n<p>如果将数组下标作为<code>key</code>值，那么当列表发生变化时，可能会导致<code>key</code>值发生改变，从而引发不必要的组件重新渲染，甚至会导致性能问题。例如，当删除列表中某个元素时，其后面的所有元素的下标都会发生改变，导致<code>Vue</code>重新渲染整个列表。</p>","autoDesc":true}');export{e as data};
