const e=JSON.parse('{"key":"v-1cd629eb","path":"/qianduan/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/react/%E6%8B%93%E5%B1%95/React%E6%89%A9%E5%B1%95.html","title":"React 拓展","lang":"zh-CN","frontmatter":{"icon":"date","order":1,"headerDepth":3,"date":"2022-07-23T00:00:00.000Z","readingTime":"N/A","word":"N/A","lastUpdated":true,"article":false,"description":"React 拓展 1. setState 2 种写法 对象式：setState(stateChange, [callback]) stateChange 为状态改变对象(该对象可以体现出状态的更改) callback 是可选的回调函数, 它在状态更新完毕、界面也更新后(render 调用后)才被调用 函数式：setState(updater, [callback]) updater 为返回 stateChange 对象的函数。 updater 可以接收到 state 和 props。 callback 是可选的回调函数, 它在状态更新、界面也更新后(render 调用后)才被调用。","head":[["meta",{"property":"og:url","content":"https://q-jj.github.io/knowledge/knowledge/qianduan/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/react/%E6%8B%93%E5%B1%95/React%E6%89%A9%E5%B1%95.html"}],["meta",{"property":"og:site_name","content":"湫的知识海洋"}],["meta",{"property":"og:title","content":"React 拓展"}],["meta",{"property":"og:description","content":"React 拓展 1. setState 2 种写法 对象式：setState(stateChange, [callback]) stateChange 为状态改变对象(该对象可以体现出状态的更改) callback 是可选的回调函数, 它在状态更新完毕、界面也更新后(render 调用后)才被调用 函数式：setState(updater, [callback]) updater 为返回 stateChange 对象的函数。 updater 可以接收到 state 和 props。 callback 是可选的回调函数, 它在状态更新、界面也更新后(render 调用后)才被调用。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-15T05:24:04.000Z"}],["meta",{"property":"article:author","content":"Yivn"}],["meta",{"property":"article:published_time","content":"2022-07-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-15T05:24:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"React 拓展\\",\\"description\\":\\"React 拓展 1. setState 2 种写法 对象式：setState(stateChange, [callback]) stateChange 为状态改变对象(该对象可以体现出状态的更改) callback 是可选的回调函数, 它在状态更新完毕、界面也更新后(render 调用后)才被调用 函数式：setState(updater, [callback]) updater 为返回 stateChange 对象的函数。 updater 可以接收到 state 和 props。 callback 是可选的回调函数, 它在状态更新、界面也更新后(render 调用后)才被调用。\\"}"]]},"headers":[{"level":2,"title":"1. setState","slug":"_1-setstate","link":"#_1-setstate","children":[{"level":3,"title":"2 种写法","slug":"_2-种写法","link":"#_2-种写法","children":[]}]},{"level":2,"title":"2. 路由组件 lazyLoad","slug":"_2-路由组件-lazyload","link":"#_2-路由组件-lazyload","children":[]},{"level":2,"title":"3. Fragment","slug":"_3-fragment","link":"#_3-fragment","children":[]},{"level":2,"title":"4. Context","slug":"_4-context","link":"#_4-context","children":[{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]}]},{"level":2,"title":"6. render props","slug":"_6-render-props","link":"#_6-render-props","children":[{"level":3,"title":"如何向组件内部动态传入带内容的结构(标签)?","slug":"如何向组件内部动态传入带内容的结构-标签","link":"#如何向组件内部动态传入带内容的结构-标签","children":[]},{"level":3,"title":"children props","slug":"children-props","link":"#children-props","children":[]},{"level":3,"title":"render props","slug":"render-props","link":"#render-props","children":[]}]}],"git":{"createdTime":1705296244000,"updatedTime":1705296244000,"contributors":[{"name":"Q-JJ","email":"J001222@163.com","commits":1}]},"readingTime":{"minutes":2.21,"words":664},"filePathRelative":"qianduan/框架学习/react/拓展/React扩展.md","localizedDate":"2022年7月23日","excerpt":"<h1> React 拓展</h1>\\n<h2> 1. setState</h2>\\n<h3> 2 种写法</h3>\\n<ol>\\n<li>对象式：<code>setState(stateChange, [callback])</code>\\n<ul>\\n<li>stateChange 为状态改变对象(该对象可以体现出状态的更改)</li>\\n<li>callback 是可选的回调函数, 它在状态更新完毕、界面也更新后(render 调用后)才被调用</li>\\n</ul>\\n</li>\\n<li>函数式：<code>setState(updater, [callback])</code>\\n<ul>\\n<li>updater 为返回 stateChange 对象的函数。</li>\\n<li>updater 可以接收到 state 和 props。</li>\\n<li>callback 是可选的回调函数, 它在状态更新、界面也更新后(render 调用后)才被调用。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
