import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,f as i}from"./app-131d0148.js";const s={},t=i('<h1 id="浏览器本地缓存" tabindex="-1"><a class="header-anchor" href="#浏览器本地缓存" aria-hidden="true">#</a> 浏览器本地缓存</h1><h2 id="cookie-sessionstorage-localstorage-区别" tabindex="-1"><a class="header-anchor" href="#cookie-sessionstorage-localstorage-区别" aria-hidden="true">#</a> cookie sessionStorage localStorage 区别</h2><p>Cookie、SessionStorage、 LocalStorage都是浏览器的本地存储。</p><p>它们的共同点：都是存储在浏览器本地的</p><p>它们的区别：</p><ul><li>cookie是由服务器端写入的，而SessionStorage、 LocalStorage都是由前端写入的</li><li>cookie的生命周期是由服务器端在写入的时候就设置好的，LocalStorage是写入就一直存在，除非手动清除，SessionStorage是页面关闭的时候就会自动清除。</li><li>cookie的存储空间比较小大概4KB，SessionStorage、 LocalStorage存储空间比较大，大概5M。</li><li>Cookie、SessionStorage、 LocalStorage数据共享都遵循同源原则，SessionStorage还限制必须是同一个页面。在前端给后端发送请求的时候会自动携带Cookie中的数据，但是SessionStorage、 LocalStorage不会</li><li>Cookie一般用于存储登录验证信息SessionID或者token，LocalStorage常用于存储不易变动的数据，减轻服务器的压力，SessionStorage可以用来检测用户是否是刷新进入页面，如音乐播放器恢复播放进度条的功能。</li></ul>',6),r=[t];function c(l,n){return e(),a("div",null,r)}const g=o(s,[["render",c],["__file","浏览器本地缓存.html.vue"]]);export{g as default};
