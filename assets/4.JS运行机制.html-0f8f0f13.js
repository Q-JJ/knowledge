const e=JSON.parse('{"key":"v-27e2c36e","path":"/qianduan/%E5%9F%BA%E7%A1%80/JS/4.JS%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6.html","title":"js运行机制","lang":"zh-CN","frontmatter":{"icon":"date","order":4,"headerDepth":3,"date":"2022-07-23T00:00:00.000Z","readingTime":"N/A","word":"N/A","lastUpdated":true,"article":false,"description":"js运行机制 JS是单线程的。 为了防止一个函数执行时间过长阻塞后面的代码，所以会先将同步代码压入执行栈中，依次执行。将异步代码推入异步队列，异步队列又分为宏任务队列和微任务队列，因为宏任务队列的执行时间较长，所以微任务队列要优先于宏任务队列。同步任务没有执行完，队列里的异步任务是不会执行的。 微任务队列有Promise.then，MutationObserver,process.nextTick(Node.js 环境)。只有一个微任务队列","head":[["meta",{"property":"og:url","content":"https://q-jj.github.io/knowledge/knowledge/qianduan/%E5%9F%BA%E7%A1%80/JS/4.JS%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"湫的知识海洋"}],["meta",{"property":"og:title","content":"js运行机制"}],["meta",{"property":"og:description","content":"js运行机制 JS是单线程的。 为了防止一个函数执行时间过长阻塞后面的代码，所以会先将同步代码压入执行栈中，依次执行。将异步代码推入异步队列，异步队列又分为宏任务队列和微任务队列，因为宏任务队列的执行时间较长，所以微任务队列要优先于宏任务队列。同步任务没有执行完，队列里的异步任务是不会执行的。 微任务队列有Promise.then，MutationObserver,process.nextTick(Node.js 环境)。只有一个微任务队列"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-29T03:52:20.000Z"}],["meta",{"property":"article:author","content":"Yivn"}],["meta",{"property":"article:published_time","content":"2022-07-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-29T03:52:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"js运行机制\\",\\"description\\":\\"js运行机制 JS是单线程的。 为了防止一个函数执行时间过长阻塞后面的代码，所以会先将同步代码压入执行栈中，依次执行。将异步代码推入异步队列，异步队列又分为宏任务队列和微任务队列，因为宏任务队列的执行时间较长，所以微任务队列要优先于宏任务队列。同步任务没有执行完，队列里的异步任务是不会执行的。 微任务队列有Promise.then，MutationObserver,process.nextTick(Node.js 环境)。只有一个微任务队列\\"}"]]},"headers":[{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":2,"title":"Event Loop","slug":"event-loop","link":"#event-loop","children":[{"level":3,"title":"步骤","slug":"步骤","link":"#步骤","children":[]}]},{"level":2,"title":"nodejs轮询机制","slug":"nodejs轮询机制","link":"#nodejs轮询机制","children":[]}],"git":{"createdTime":1703821940000,"updatedTime":1703821940000,"contributors":[{"name":"Q-JJ","email":"J001222@163.com","commits":1}]},"readingTime":{"minutes":3.46,"words":1039},"filePathRelative":"qianduan/基础/JS/4.JS运行机制.md","localizedDate":"2022年7月23日","excerpt":"<h1> js运行机制</h1>\\n<p>JS是<mark>单线程</mark>的。</p>\\n<p>为了防止一个函数执行时间过长阻塞后面的代码，所以会先将同步代码压入执行栈中，依次执行。将异步代码推入异步队列，异步队列又分为<mark>宏任务队列</mark>和<mark>微任务队列</mark>，因为宏任务队列的执行时间较长，所以微任务队列要优先于宏任务队列。<strong>同步任务没有执行完，队列里的异步任务是不会执行的</strong>。</p>\\n<p>微任务队列有<code>Promise.then</code>，<code>MutationObserver</code>,<code>process.nextTick(Node.js 环境)</code>。只有一个微任务队列</p>","autoDesc":true}');export{e as data};
