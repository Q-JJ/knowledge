import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as p}from"./app-131d0148.js";const t={},e=p(`<h1 id="手写call、apply、bind" tabindex="-1"><a class="header-anchor" href="#手写call、apply、bind" aria-hidden="true">#</a> 手写call、apply、bind</h1><h2 id="call" tabindex="-1"><a class="header-anchor" href="#call" aria-hidden="true">#</a> call</h2><ol><li>定义Call方法</li><li>设置this并调用原函数</li><li>接收剩余参数并返回结果</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        thisArg<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">//this为原函数(原函数.myCall)</span>
        <span class="token keyword">const</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
        <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>f
        <span class="token keyword">return</span> res
    <span class="token punctuation">}</span>


    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;qiu&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token parameter">numA<span class="token punctuation">,</span> numB</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// this为person</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numA<span class="token punctuation">,</span> numB<span class="token punctuation">)</span> <span class="token comment">// 6 4</span>
      <span class="token keyword">return</span> numA <span class="token operator">+</span> numB
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;返回值为:&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token comment">// 10</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="symbol调优" tabindex="-1"><a class="header-anchor" href="#symbol调优" aria-hidden="true">#</a> symbol调优</h3><p>上面的代码中我们在传入对象中加入了一个方法f,然后使用。如果传入的对象中也有一个同名的方法f的话，可能出现问题。我们没办法保证传入的对象的属性，则需要加一个和原属性不重名的新属性（方法）。<br><mark>symbol()返回的symbol值都是唯一的，可以作为对象属性的标识符</mark></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span>
      <span class="token comment">// 把key解析为属性名</span>
      thisArg<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span>
      <span class="token keyword">const</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
      <span class="token keyword">delete</span> thisArg<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
      <span class="token keyword">return</span> res
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="apply" tabindex="-1"><a class="header-anchor" href="#apply" aria-hidden="true">#</a> apply</h2><ol><li>定义myApply方法</li><li>设置this并调用原函数</li><li>接收参数并返回结果</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>   <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span>
       thisArg<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span>
       <span class="token keyword">const</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
       <span class="token keyword">delete</span> thisArg<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token keyword">return</span> res
   <span class="token punctuation">}</span>

   <span class="token keyword">const</span> res <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token function">myApply</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;返回值为:&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token comment">// 10</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bind" tabindex="-1"><a class="header-anchor" href="#bind" aria-hidden="true">#</a> bind</h2><ol><li>定义myBind方法</li><li>返回绑定this的新函数</li><li>合并绑定和新传入的参数</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>   <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 2. 返回绑定this的新函数</span>
     <span class="token comment">// 用箭头函数的意义：从上一个作用域里继承this</span>
     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>reArgs</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
       <span class="token comment">// this:原函数(原函数.myBind)</span>
       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>reArgs<span class="token punctuation">)</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;qiu&#39;</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token parameter">numA<span class="token punctuation">,</span> numB<span class="token punctuation">,</span> numC<span class="token punctuation">,</span> numD</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numA<span class="token punctuation">,</span> numB<span class="token punctuation">,</span> numC<span class="token punctuation">,</span> numD<span class="token punctuation">)</span>
     <span class="token keyword">return</span> numA <span class="token operator">+</span> numB <span class="token operator">+</span> numC <span class="token operator">+</span> numD
   <span class="token punctuation">}</span>

   <span class="token keyword">const</span> bindFunc <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token function">myBind</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>

   <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">bindFunc</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;返回值:&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","12.手写call、apply、bind.html.vue"]]);export{k as default};
