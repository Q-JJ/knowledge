const n=JSON.parse(`{"key":"v-6ca29a23","path":"/qianduan/%E5%9F%BA%E7%A1%80/JS/12.%E6%89%8B%E5%86%99call%E3%80%81apply%E3%80%81bind.html","title":"手写call、apply、bind","lang":"zh-CN","frontmatter":{"icon":"date","order":13,"headerDepth":3,"date":"2022-07-23T00:00:00.000Z","readingTime":"N/A","word":"N/A","lastUpdated":true,"article":false,"description":"手写call、apply、bind call 定义Call方法 设置this并调用原函数 接收剩余参数并返回结果 Function.prototype.myCall = function(thisArg,...args){ thisArg.f = this //this为原函数(原函数.myCall) const res = thisArg.f(...args) delete thisArg.f return res } const person = { name: 'qiu' } function func(numA, numB) { console.log(this) // this为person console.log(numA, numB) // 6 4 return numA + numB } const res = func.myCall(person, 6, 4) console.log('返回值为:', res) // 10","head":[["meta",{"property":"og:url","content":"https://q-jj.github.io/knowledge/knowledge/qianduan/%E5%9F%BA%E7%A1%80/JS/12.%E6%89%8B%E5%86%99call%E3%80%81apply%E3%80%81bind.html"}],["meta",{"property":"og:site_name","content":"湫的知识海洋"}],["meta",{"property":"og:title","content":"手写call、apply、bind"}],["meta",{"property":"og:description","content":"手写call、apply、bind call 定义Call方法 设置this并调用原函数 接收剩余参数并返回结果 Function.prototype.myCall = function(thisArg,...args){ thisArg.f = this //this为原函数(原函数.myCall) const res = thisArg.f(...args) delete thisArg.f return res } const person = { name: 'qiu' } function func(numA, numB) { console.log(this) // this为person console.log(numA, numB) // 6 4 return numA + numB } const res = func.myCall(person, 6, 4) console.log('返回值为:', res) // 10"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-15T05:24:04.000Z"}],["meta",{"property":"article:author","content":"Yivn"}],["meta",{"property":"article:published_time","content":"2022-07-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-15T05:24:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"手写call、apply、bind\\",\\"description\\":\\"手写call、apply、bind call 定义Call方法 设置this并调用原函数 接收剩余参数并返回结果 Function.prototype.myCall = function(thisArg,...args){ thisArg.f = this //this为原函数(原函数.myCall) const res = thisArg.f(...args) delete thisArg.f return res } const person = { name: 'qiu' } function func(numA, numB) { console.log(this) // this为person console.log(numA, numB) // 6 4 return numA + numB } const res = func.myCall(person, 6, 4) console.log('返回值为:', res) // 10\\"}"]]},"headers":[{"level":2,"title":"call","slug":"call","link":"#call","children":[{"level":3,"title":"symbol调优","slug":"symbol调优","link":"#symbol调优","children":[]}]},{"level":2,"title":"apply","slug":"apply","link":"#apply","children":[]},{"level":2,"title":"bind","slug":"bind","link":"#bind","children":[]}],"git":{"createdTime":1705296244000,"updatedTime":1705296244000,"contributors":[{"name":"Q-JJ","email":"J001222@163.com","commits":1}]},"readingTime":{"minutes":1.46,"words":438},"filePathRelative":"qianduan/基础/JS/12.手写call、apply、bind.md","localizedDate":"2022年7月23日","excerpt":"<h1> 手写call、apply、bind</h1>\\n<h2> call</h2>\\n<ol>\\n<li>定义Call方法</li>\\n<li>设置this并调用原函数</li>\\n<li>接收剩余参数并返回结果</li>\\n</ol>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code>    <span class=\\"token class-name\\">Function</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">myCall</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">thisArg<span class=\\"token punctuation\\">,</span><span class=\\"token operator\\">...</span>args</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        thisArg<span class=\\"token punctuation\\">.</span>f <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span> <span class=\\"token comment\\">//this为原函数(原函数.myCall)</span>\\n        <span class=\\"token keyword\\">const</span> res <span class=\\"token operator\\">=</span> thisArg<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">f</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">...</span>args<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">delete</span> thisArg<span class=\\"token punctuation\\">.</span>f\\n        <span class=\\"token keyword\\">return</span> res\\n    <span class=\\"token punctuation\\">}</span>\\n\\n\\n    <span class=\\"token keyword\\">const</span> person <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'qiu'</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">numA<span class=\\"token punctuation\\">,</span> numB</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// this为person</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>numA<span class=\\"token punctuation\\">,</span> numB<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 6 4</span>\\n      <span class=\\"token keyword\\">return</span> numA <span class=\\"token operator\\">+</span> numB\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">const</span> res <span class=\\"token operator\\">=</span> func<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">myCall</span><span class=\\"token punctuation\\">(</span>person<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'返回值为:'</span><span class=\\"token punctuation\\">,</span> res<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 10</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
