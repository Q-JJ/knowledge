const n=JSON.parse('{"key":"v-76af3d18","path":"/qianduan/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/Vue/%E9%AB%98%E7%BA%A7%E7%AF%87/%E6%B7%B7%E5%85%A5%E4%B8%8E%E6%8F%92%E4%BB%B6.html","title":"混入与插件","lang":"zh-CN","frontmatter":{"icon":"date","order":4,"headerDepth":3,"date":"2022-07-23T00:00:00.000Z","readingTime":"N/A","word":"N/A","lastUpdated":true,"article":false,"description":"混入与插件 mixin 混入 功能：将组件的公共逻辑或者配置提取出来，哪个组件需要用到时，直接将提取的这部分混入到组件内部即可。 优点：既可以减少代码冗余度、提高代码复用性、不需要传递状态，也可以让后期维护起来更加容易。 缺点：命名命名冲突和模糊的合并策略，复杂 使用方式 // src/mixin/index.js export const mixins = { data() { return {}; }, computed: {}, created() {}, mounted() {}, methods: {}, };","head":[["meta",{"property":"og:url","content":"https://q-jj.github.io/knowledge/knowledge/qianduan/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/Vue/%E9%AB%98%E7%BA%A7%E7%AF%87/%E6%B7%B7%E5%85%A5%E4%B8%8E%E6%8F%92%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"湫的知识海洋"}],["meta",{"property":"og:title","content":"混入与插件"}],["meta",{"property":"og:description","content":"混入与插件 mixin 混入 功能：将组件的公共逻辑或者配置提取出来，哪个组件需要用到时，直接将提取的这部分混入到组件内部即可。 优点：既可以减少代码冗余度、提高代码复用性、不需要传递状态，也可以让后期维护起来更加容易。 缺点：命名命名冲突和模糊的合并策略，复杂 使用方式 // src/mixin/index.js export const mixins = { data() { return {}; }, computed: {}, created() {}, mounted() {}, methods: {}, };"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-04T12:24:58.000Z"}],["meta",{"property":"article:author","content":"Yivn"}],["meta",{"property":"article:published_time","content":"2022-07-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-04T12:24:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"混入与插件\\",\\"description\\":\\"混入与插件 mixin 混入 功能：将组件的公共逻辑或者配置提取出来，哪个组件需要用到时，直接将提取的这部分混入到组件内部即可。 优点：既可以减少代码冗余度、提高代码复用性、不需要传递状态，也可以让后期维护起来更加容易。 缺点：命名命名冲突和模糊的合并策略，复杂 使用方式 // src/mixin/index.js export const mixins = { data() { return {}; }, computed: {}, created() {}, mounted() {}, methods: {}, };\\"}"]]},"headers":[{"level":2,"title":"mixin 混入","slug":"mixin-混入","link":"#mixin-混入","children":[{"level":3,"title":"局部混入","slug":"局部混入","link":"#局部混入","children":[]},{"level":3,"title":"全局混入","slug":"全局混入","link":"#全局混入","children":[]}]},{"level":2,"title":"5. plugin 插件","slug":"_5-plugin-插件","link":"#_5-plugin-插件","children":[]}],"git":{"createdTime":1699100698000,"updatedTime":1699100698000,"contributors":[{"name":"Q-JJ","email":"J001222@163.com","commits":1}]},"readingTime":{"minutes":2.06,"words":617},"filePathRelative":"qianduan/框架学习/Vue/高级篇/混入与插件.md","localizedDate":"2022年7月23日","excerpt":"<h1> 混入与插件</h1>\\n<h2> mixin 混入</h2>\\n<ol>\\n<li>\\n<p>功能：将组件的公共逻辑或者配置提取出来，哪个组件需要用到时，直接将提取的这部分混入到组件内部即可。</p>\\n<ul>\\n<li>\\n<p>优点：既可以减少代码冗余度、提高代码复用性、不需要传递状态，也可以让后期维护起来更加容易。</p>\\n</li>\\n<li>\\n<p>缺点：命名命名冲突和模糊的合并策略，复杂</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>使用方式</p>\\n</li>\\n</ol>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// src/mixin/index.js</span>\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">const</span> mixins <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">data</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">computed</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token function\\">created</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token function\\">mounted</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">methods</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
