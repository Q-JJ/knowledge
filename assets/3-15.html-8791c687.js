import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as p,b as n,d as a,e as l,f as i}from"./app-131d0148.js";const c={},r=i(`<h1 id="笔试知识点" tabindex="-1"><a class="header-anchor" href="#笔试知识点" aria-hidden="true">#</a> 笔试知识点</h1><h2 id="html" tabindex="-1"><a class="header-anchor" href="#html" aria-hidden="true">#</a> html</h2><h4 id="_1-外部资源" tabindex="-1"><a class="header-anchor" href="#_1-外部资源" aria-hidden="true">#</a> 1. 外部资源</h4><p>外部资源由 <code>&lt;object&gt;</code> 元素表示，该元素可以被视为图像、嵌套的浏览上下文或插件要处理的资源。它包括各种属性，如存档、边框、分类、代码库、代码类型等</p><div class="hint-container warning"><p class="hint-container-title">易混淆</p><p><code>&lt;source&gt;</code> 标签为媒介元素（比如 <code>&lt;video&gt;</code> 和 <code>&lt;audio&gt;</code>）定义媒介资源。<br><code>&lt;source&gt;</code> 标签允许您规定可替换的视频/音频文件供浏览器根据它对媒体类型或者编解码器的支持进行选择。</p></div><h4 id="_2-标记或突出显示的文本" tabindex="-1"><a class="header-anchor" href="#_2-标记或突出显示的文本" aria-hidden="true">#</a> 2. 标记或突出显示的文本</h4><ul><li><code>highlight</code> ：jQuery 中的，<strong>突出特效</strong>，通过改变背景颜色来隐藏或者显示一个元素</li><li><code>mark</code>： h5 中的<strong>标签</strong>，定义带有记号的文本，文本高亮显示</li><li><code>strong</code>： HTML 中的<strong>标签</strong>，定义重要文本，用来加粗文本</li><li>blink ：是 js 中的<strong>方法</strong>，用于显示闪动的字符串，不能用于 ie，Chrome，Safari</li></ul><h4 id="_3-dhtml" tabindex="-1"><a class="header-anchor" href="#_3-dhtml" aria-hidden="true">#</a> 3.DHTML</h4><p>DHTML 是一种使 HTML 页面具有动态特性的艺术，对大多数人来说，DHTML 意味着 HTML、CSS 和 JavaScript 的组合。</p><h4 id="_4-元数据内容" tabindex="-1"><a class="header-anchor" href="#_4-元数据内容" aria-hidden="true">#</a> 4.元数据内容</h4><p>metadata content 包括：base、link、meta、noscript、template、style、script、title 等</p><h2 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h2><h4 id="_1-svg-与-canvas-的区别" tabindex="-1"><a class="header-anchor" href="#_1-svg-与-canvas-的区别" aria-hidden="true">#</a> 1. SVG 与 Canvas 的区别</h4><ul><li>SVG 不依赖分辨率；Canvas 依赖分辨率</li><li>SVG 支持事件绑定</li><li>SVG 不能用来实现网页游戏；Canvas 最适合网页游戏</li><li>SVG 适合大型渲染区域的程序(例如百度地图)</li><li>Canvas 保存为&quot;.jpg&quot;格式的图片</li></ul><h4 id="_2-css3-动画-运用-keyframes-规则和-animation-属性" tabindex="-1"><a class="header-anchor" href="#_2-css3-动画-运用-keyframes-规则和-animation-属性" aria-hidden="true">#</a> 2. CSS3 动画：运用@keyframes 规则和 animation 属性</h4><h4 id="_3-2d" tabindex="-1"><a class="header-anchor" href="#_3-2d" aria-hidden="true">#</a> 3. 2D</h4><p>transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</p><p>rotate() 方法旋转当前的绘图</p><p>scale 是按比例放大或者缩小</p><h4 id="_4-css-跨域" tabindex="-1"><a class="header-anchor" href="#_4-css-跨域" aria-hidden="true">#</a> 4.CSS 跨域</h4><ul><li><p>css 文件的加载不受跨域限制，a 站点能引用 B 站点的样式 d。</p></li><li><p>但字体的引入是可以产生跨域问题的</p></li><li><p>canvas 的 drawImage 使用跨域图片，会报错</p><ul><li><p>如果图片不大不多可以使用 base64</p></li><li><p>实例的 image 对象的设置 img.crossOrigin = &#39; &#39;;并且在服务器端设置 Access-Control-Allow-Origin:*(或运行的域名)</p></li></ul></li></ul><h4 id="_5-css-百分比参照问题" tabindex="-1"><a class="header-anchor" href="#_5-css-百分比参照问题" aria-hidden="true">#</a> 5.CSS 百分比参照问题</h4><ul><li><p>参照父元素<strong>宽度</strong>的元素：padding <strong>margin</strong> width text-indent</p></li><li><p>参照父元素高度的元素：height</p></li><li><p>参照父元素属性:font-size line-height</p></li><li><p>特殊：相对定位的时候，top(bottom) left(right)参照的是父元素的内容区域的高度与宽度，而绝对定位的时候参照的是最近的定位元素包含 padding 的高度与宽度</p></li></ul><h4 id="_6-nth-child-n-使用" tabindex="-1"><a class="header-anchor" href="#_6-nth-child-n-使用" aria-hidden="true">#</a> 6.nth-child(n)使用</h4><p><strong>n 是从 1 开始的</strong></p><ul><li><p>正方向范围</p><ul><li>li:nth-child(n+6)：选中从第 6 个开始的子元素</li></ul></li><li><p>负方向范围</p><ul><li>:nth-child(-n+9)：选中从第 1 个到第 9 个子元素。</li></ul></li><li><p>前后限制范围</p><ul><li>:nth-child(n+4):nth-child(-n+8)：选中第 4-8 个子元素。</li></ul></li><li><p>奇数、偶数位</p><ul><li>:nth-child(odd)</li><li>:nth-child(even)</li></ul></li></ul><h2 id="js" tabindex="-1"><a class="header-anchor" href="#js" aria-hidden="true">#</a> JS</h2><h4 id="_1-三元与" tabindex="-1"><a class="header-anchor" href="#_1-三元与" aria-hidden="true">#</a> 1.三元与<code>==</code></h4><p><strong>“==”运算符（两个操作数的类型不相同时）</strong></p><ol><li><p>如果有操作数是布尔值，则在比较相等性之前先将其转换为数值。false 转换为 0，而 true 转换为 1；</p></li><li><p>如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值；</p></li><li><p>如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf()方法，用得到的基本类型值按照前面的规则进行比较。</p></li><li><p>如果一个值是 null，另一个值是 undefined，则它们相等</p></li><li><p>null 和 undefined 除了和彼此比较以外，与其他任何类型操作数进行相等性测试都为 false</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 					<span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">)</span>     <span class="token comment">// false</span>
 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">//true</span>
 <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
 <span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span>
 <span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
 <span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">解释</p><ol><li><p>[]==false 为 true<br> 由于[]不是原始值类型故需转化,先调用<code>[].valueOf()</code>转后为<code>[]</code>；继续用 toString 方法<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>转换<code>[].toString()</code>，结果为<code>&#39;&#39;</code>；使用 Number 转换<code>Number(&#39;&#39;) == Number(false)</code>，结果为 true</p></li><li><p>{}==false 为 false<br> {}不是原始值类型故需转化。与[]同理。<code>{}.toString()</code>结果为<code>[Obejct obejct]</code>；使用 Number 转换，<code>Number({}.toString())</code>结果为<code>NaN</code>。<code>NaN</code>与任何值都不相等，包括 NaN 自身。故为 false</p></li><li><p>[] == ![]<br> ！的优先级比== 大，所以先算右边：![]为 false。 所以[] == false 为 true</p></li></ol></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">2</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//true (2&lt;1为false，然后将false转为0 与3比)</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
<span class="token keyword">null</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
<span class="token keyword">null</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token keyword">null</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-块内声明函数" tabindex="-1"><a class="header-anchor" href="#_2-块内声明函数" aria-hidden="true">#</a> 2.块内声明函数</h4><figure><img src="https://uploadfiles.nowcoder.com/images/20180329/5366362_1522292834342_6879D7CE5D49039657D908C22C2CF7A1" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure><h4 id="_3-数组方法" tabindex="-1"><a class="header-anchor" href="#_3-数组方法" aria-hidden="true">#</a> 3.数组方法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>				<span class="token comment">//[,2,3,,4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>orEach(), filter(), reduce(), every() 和 some()都会跳过空位。</li><li>map()会跳过空位，但会保留这个值(ES5)。</li><li>ES6 map 会将空位的值当作 undefined</li><li>join()和 toString()会将空位视为 undefined，而 undefined 和 null 会被处理成空字符串。</li></ul><h4 id="_4-append-和-appendto" tabindex="-1"><a class="header-anchor" href="#_4-append-和-appendto" aria-hidden="true">#</a> 4.append 和 appendTo</h4><ol><li><p>append(content)</p><ul><li>方法作用：<strong>向每个匹配的元素内部追加内容。</strong></li><li>参数介绍：content : 要追加到目标中的内容。</li><li>用法示例：向所有 p 标签中追加一个单词 china，则写法为 $(&quot;p&quot;).append(&quot;china&quot;);</li></ul></li><li><p>appendTo(expr)</p><ul><li>方法作用：<strong>把所有匹配的元素追加到指定的元素元素集合中。</strong></li><li>参数介绍：expr (String): 用于匹配元素的 jQuery 表达式</li><li>用法示例：把标签 b 追加到 p 元素中，写法为$(&quot;b&quot;).appendTo(&quot;p&quot;);</li></ul></li><li><p>使用 appendTo 这个方法是颠倒了常规的$(A).append(B)的操作，即不是把 B 追加到 A 中，而是把 A 追加到 B 中。</p></li></ol><h4 id="_5-jquery-查找" tabindex="-1"><a class="header-anchor" href="#_5-jquery-查找" aria-hidden="true">#</a> 5.jQuery 查找</h4><ul><li>siblings：所有元素的同辈元素</li><li>find：后辈</li><li>eq：第几个</li><li>next：下一个</li></ul><h4 id="_6-symbol" tabindex="-1"><a class="header-anchor" href="#_6-symbol" aria-hidden="true">#</a> 6.Symbol</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">...</span>①
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">...</span>②		❌
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token operator">...</span>③
<span class="token punctuation">}</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">...</span>④
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Symbol 本质上是一种唯一标识符，可用作对象的唯一属性名，这样其他人就不会改写或覆盖你设置的属性值。</p><ol><li>Symbol 值不能与其他类型的值进行<strong>运算</strong></li><li>Symbol 值不可以和其他类型值进行混合运算,否则会报错</li><li>Symbol 值如果想要作为属性名，那就不能再用点运算符，因为点运算符后面跟的总是字符串</li><li>在对象内部使用 Symbol 值作为属性名的时候，必须要将值放在方括号中</li></ol><p>新的 API：Reflect.ownKeys() 方法可以返回所有类型的键名，包括常规键名和 Symbol 键名。</p><h4 id="_7-变量删除" tabindex="-1"><a class="header-anchor" href="#_7-变量删除" aria-hidden="true">#</a> 7.变量删除</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;var c = 3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> a<span class="token punctuation">;</span>
<span class="token keyword">delete</span> b<span class="token punctuation">;</span>
<span class="token keyword">delete</span> c<span class="token punctuation">;</span>
<span class="token comment">//所有能被访问到的变量包括：a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 eval 中使用 var 声明的全局变量可以被 delete 删除，所以变量 c 能删除成功</li><li>使用 var 声明的全局变量或者局部变量一般是不能被 delete 删除的，所以变量 a 无法被删除，仍然可以访问到，</li><li>而未使用 var 声明的全局变量可以使用 delete 进行删除，所以无法访问到 b。</li></ul><h4 id="_8" tabindex="-1"><a class="header-anchor" href="#_8" aria-hidden="true">#</a> 8.</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var f = function g() {
    return 23;
 };
typeof g();		//ReferenceError，g is not defined
typeof f;			//function
typeof f();   //number
typeof g;			//undefined
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-js-禁用按钮" tabindex="-1"><a class="header-anchor" href="#_9-js-禁用按钮" aria-hidden="true">#</a> 9.js 禁用按钮</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>document.getElementById(&quot;button1&quot;).disabled = true;
document.getElementById(&quot;button1&quot;).setAttribute(&#39;disabled&#39;,&#39;true&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">属性</p><ol><li><p>setAttribute 属性设置禁用时,第二个参数不论设置什么样的值,都能进行禁用。</p></li><li><p>disabled 和 readOnly 都是表单的公有属性， readOnly 是只读， disabled 是禁用。</p></li><li><p>Readonly 只针对 input(text/password) 和 textarea 有效,</p></li></ol></div><hr class="footnotes-sep">`,56),u={class:"footnotes"},d={class:"footnotes-list"},k={id:"footnote1",class:"footnote-item"},h={href:"https://www.w3school.com.cn/jsref/jsref_object_tostring.asp",target:"_blank",rel:"noopener noreferrer"},m=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function b(v,f){const s=t("ExternalLinkIcon");return o(),p("div",null,[r,n("section",u,[n("ol",d,[n("li",k,[n("p",null,[n("a",h,[a("toString()方法详细介绍"),l(s)]),a(),m])])])])])}const x=e(c,[["render",b],["__file","3-15.html.vue"]]);export{x as default};
