import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as o,f as i}from"./app-131d0148.js";const r="/knowledge/assets/image-7b1bcad8.png",n="/knowledge/assets/20210811221049-50a0894f.png",a={},s=i('<h1 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex" aria-hidden="true">#</a> vuex</h1><p>专门在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的<span style="color:red;"><strong>共享状态</strong></span>进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><figure><img src="'+r+'" alt="vuex工作原理" tabindex="0" loading="lazy"><figcaption>vuex工作原理</figcaption></figure><ol><li><strong>State</strong>：定义了应用的状态数据</li><li><strong>Getter</strong>：在 store 中定义“getter”（可以认为是 store 的计算属性），就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来， 且只有当它的依赖值发生了改变才会被重新计算</li><li><strong>Mutation</strong>：是唯一更改 store 中状态的方法，且必须是同步函数</li><li><strong>Action</strong>：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作</li><li><strong>Module</strong>：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中</li></ol><h2 id="用途" tabindex="-1"><a class="header-anchor" href="#用途" aria-hidden="true">#</a> 用途</h2><ol><li><p>多个组件依赖于同一状态</p></li><li><p>来自不同组件的行为需要变更同一状态</p></li></ol><figure><img src="'+n+'" alt="多组件共享数据" tabindex="0" loading="lazy"><figcaption>多组件共享数据</figcaption></figure>',7),l=[s];function c(g,d){return e(),o("div",null,l)}const p=t(a,[["render",c],["__file","介绍.html.vue"]]);export{p as default};
