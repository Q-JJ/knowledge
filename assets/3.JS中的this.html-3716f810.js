const i=JSON.parse('{"key":"v-103c450b","path":"/qianduan/%E5%9F%BA%E7%A1%80/JS/3.JS%E4%B8%AD%E7%9A%84this.html","title":"JS 中 this","lang":"zh-CN","frontmatter":{"icon":"date","order":3,"headerDepth":3,"date":"2022-07-23T00:00:00.000Z","readingTime":"N/A","word":"N/A","lastUpdated":true,"article":false,"description":"JS 中 this this指向 作为普通函数执行时，this指向window。 当函数作为对象的方法被调用时，this就会指向该对象。 构造器调用，this指向返回的这个对象。 箭头函数 箭头函数的this绑定看的是this所在函数定义在哪个对象下，就绑定哪个对象。如果有嵌套的情况，则this绑定到最近的一层对象上。 基于Function.prototype上的 apply 、 call 和 bind 调用模式。 apply 、 call 和 bind 区别： 三者都可以改变函数的this对象指向 三者第一个参数都是this要指向的对象，如果没有参数或参数=undefined或null，则默认指向window apply传参为数组、call为参数列表，且它们是一次性传入参数。bind可以分为多次传入 apply、call是立即执行；bind是返回绑定this之后的函数，便于稍后调用。 bind会返回一个新的函数，如果这个新函数作为构造函数创建一个新的对象。那么this指向用new创建的实例。 严格模式 // 开启严格模式 use strict 全局执行环境：严格模式，非严格模式都指向全局对象（window） 函数内部 直接调用 严格模式下:undefined 非严格模式:全局对象（window） 对象方法调用：严格模式，非严格模式都指向调用者","head":[["meta",{"property":"og:url","content":"https://q-jj.github.io/knowledge/knowledge/qianduan/%E5%9F%BA%E7%A1%80/JS/3.JS%E4%B8%AD%E7%9A%84this.html"}],["meta",{"property":"og:site_name","content":"湫的知识海洋"}],["meta",{"property":"og:title","content":"JS 中 this"}],["meta",{"property":"og:description","content":"JS 中 this this指向 作为普通函数执行时，this指向window。 当函数作为对象的方法被调用时，this就会指向该对象。 构造器调用，this指向返回的这个对象。 箭头函数 箭头函数的this绑定看的是this所在函数定义在哪个对象下，就绑定哪个对象。如果有嵌套的情况，则this绑定到最近的一层对象上。 基于Function.prototype上的 apply 、 call 和 bind 调用模式。 apply 、 call 和 bind 区别： 三者都可以改变函数的this对象指向 三者第一个参数都是this要指向的对象，如果没有参数或参数=undefined或null，则默认指向window apply传参为数组、call为参数列表，且它们是一次性传入参数。bind可以分为多次传入 apply、call是立即执行；bind是返回绑定this之后的函数，便于稍后调用。 bind会返回一个新的函数，如果这个新函数作为构造函数创建一个新的对象。那么this指向用new创建的实例。 严格模式 // 开启严格模式 use strict 全局执行环境：严格模式，非严格模式都指向全局对象（window） 函数内部 直接调用 严格模式下:undefined 非严格模式:全局对象（window） 对象方法调用：严格模式，非严格模式都指向调用者"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-15T05:24:04.000Z"}],["meta",{"property":"article:author","content":"Yivn"}],["meta",{"property":"article:published_time","content":"2022-07-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-15T05:24:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"JS 中 this\\",\\"description\\":\\"JS 中 this this指向 作为普通函数执行时，this指向window。 当函数作为对象的方法被调用时，this就会指向该对象。 构造器调用，this指向返回的这个对象。 箭头函数 箭头函数的this绑定看的是this所在函数定义在哪个对象下，就绑定哪个对象。如果有嵌套的情况，则this绑定到最近的一层对象上。 基于Function.prototype上的 apply 、 call 和 bind 调用模式。 apply 、 call 和 bind 区别： 三者都可以改变函数的this对象指向 三者第一个参数都是this要指向的对象，如果没有参数或参数=undefined或null，则默认指向window apply传参为数组、call为参数列表，且它们是一次性传入参数。bind可以分为多次传入 apply、call是立即执行；bind是返回绑定this之后的函数，便于稍后调用。 bind会返回一个新的函数，如果这个新函数作为构造函数创建一个新的对象。那么this指向用new创建的实例。 严格模式 // 开启严格模式 use strict 全局执行环境：严格模式，非严格模式都指向全局对象（window） 函数内部 直接调用 严格模式下:undefined 非严格模式:全局对象（window） 对象方法调用：严格模式，非严格模式都指向调用者\\"}"]]},"headers":[{"level":2,"title":"this指向","slug":"this指向","link":"#this指向","children":[]},{"level":2,"title":"然后指定this的值","slug":"然后指定this的值","link":"#然后指定this的值","children":[]}],"git":{"createdTime":1703821940000,"updatedTime":1705296244000,"contributors":[{"name":"Q-JJ","email":"J001222@163.com","commits":2}]},"readingTime":{"minutes":2.1,"words":630},"filePathRelative":"qianduan/基础/JS/3.JS中的this.md","localizedDate":"2022年7月23日","excerpt":"<h1> JS 中 this</h1>\\n<h2> this指向</h2>\\n<ol>\\n<li>\\n<p>作为普通函数执行时，<code>this</code>指向<code>window</code>。</p>\\n</li>\\n<li>\\n<p>当函数作为对象的方法被调用时，<code>this</code>就会指向<code>该对象</code>。</p>\\n</li>\\n<li>\\n<p>构造器调用，<code>this</code>指向<code>返回的这个对象</code>。</p>\\n</li>\\n<li>\\n<p><mark>箭头函数</mark> 箭头函数的<code>this</code>绑定看的是this所在函数定义在哪个对象下，就绑定哪个对象。如果有嵌套的情况，则this绑定到最近的一层对象上。</p>\\n</li>\\n<li>\\n<p>基于Function.prototype上的 <code>apply 、 call 和 bind </code>调用模式。<br>\\n<code>apply 、 call 和 bind </code>区别：</p>\\n<ul>\\n<li>\\n<p>三者都可以改变函数的this对象指向</p>\\n</li>\\n<li>\\n<p>三者第一个参数都是this要指向的对象，如果没有参数或参数=undefined或null，则默认指向window</p>\\n</li>\\n<li>\\n<p>apply传参为数组、call为参数列表，且它们是一次性传入参数。bind可以分为多次传入</p>\\n</li>\\n<li>\\n<p>apply、call是立即执行；bind是返回绑定this之后的函数，便于稍后调用。</p>\\n</li>\\n<li>\\n<p>bind会返回一个新的函数，如果这个新函数作为构造函数创建一个新的对象。那么this指向用new创建的实例。</p>\\n</li>\\n</ul>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">严格模式</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>// 开启严格模式\\nuse strict\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><ol>\\n<li>全局执行环境：严格模式，非严格模式都指向全局对象（window）</li>\\n<li>函数内部\\n<ul>\\n<li>直接调用\\n<ul>\\n<li>严格模式下:undefined</li>\\n<li>非严格模式:全局对象（window）</li>\\n</ul>\\n</li>\\n<li>对象方法调用：严格模式，非严格模式都指向调用者</li>\\n</ul>\\n</li>\\n</ol>\\n</div>\\n</li>\\n</ol>","autoDesc":true}');export{i as data};
