import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,f as e}from"./app-131d0148.js";const p={},t=e(`<h1 id="原型-原型链" tabindex="-1"><a class="header-anchor" href="#原型-原型链" aria-hidden="true">#</a> 原型 &amp;&amp; 原型链</h1><p><strong>原型链的基本原理</strong>：任何一个<strong>实例</strong>，通过原型链，找到它上面的<strong>原型</strong>，该原型对象中的方法和属性，可以被所有的原型实例共享。</p><ol><li><p>面向对象的三大特性：封装、继承、多态</p></li><li><p>创建对象的3种方式</p><ol><li><p>字面量：var obj = new Object(name:&quot;J&quot;);</p></li><li><p>构造函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">M</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">M</span><span class="token punctuation">(</span><span class="token string">&#39;smyhvae&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Object.create</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;smyhvae&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> obj3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//此方法创建的对象，是用原型链连接的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ol><p>Object是原型链的顶端。原型可以起到继承的作用。</p><figure><img src="http://img.smyhvae.com/20180306_1540.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>构造函数通过 new 生成实例</p></li><li><p>构造函数也是函数，构造函数的<code>prototype</code>指向原型。（所有的函数有<code>prototype</code>属性，但实例没有 <code>prototype</code>属性）</p></li><li><p>原型对象中有 constructor，指向该原型的构造函数。</p></li><li><p>实例的<code>__proto__</code>指向原型。<code>fun.__proto__ === Fun.prototype</code>。</p></li></ul>`,6),o=[t];function c(i,l){return a(),s("div",null,o)}const d=n(p,[["render",c],["__file","7.原型__原型链.html.vue"]]);export{d as default};
