const t=JSON.parse('{"key":"v-53f6d7ae","path":"/qianduan/%E5%9F%BA%E7%A1%80/TypeScript/%E4%BB%8B%E7%BB%8D.html","title":"介绍","lang":"zh-CN","frontmatter":{"icon":"typescript","order":1,"date":"2022-09-10T00:00:00.000Z","readingTime":"N/A","word":"N/A","article":false,"description":"介绍 TypeScript是JavaScript的超集。 它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。 TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。 TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。 相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能； TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率； TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题； TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。","head":[["meta",{"property":"og:url","content":"https://q-jj.github.io/knowledge/knowledge/qianduan/%E5%9F%BA%E7%A1%80/TypeScript/%E4%BB%8B%E7%BB%8D.html"}],["meta",{"property":"og:site_name","content":"湫的知识海洋"}],["meta",{"property":"og:title","content":"介绍"}],["meta",{"property":"og:description","content":"介绍 TypeScript是JavaScript的超集。 它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。 TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。 TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。 相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能； TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率； TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题； TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-27T08:54:09.000Z"}],["meta",{"property":"article:author","content":"Yivn"}],["meta",{"property":"article:published_time","content":"2022-09-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-27T08:54:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"介绍\\",\\"description\\":\\"介绍 TypeScript是JavaScript的超集。 它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。 TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。 TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。 相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能； TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率； TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题； TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。\\"}"]]},"headers":[],"git":{"createdTime":1698161267000,"updatedTime":1698396849000,"contributors":[{"name":"Q-JJ","email":"J001222@163.com","commits":2}]},"readingTime":{"minutes":0.78,"words":234},"filePathRelative":"qianduan/基础/TypeScript/介绍.md","localizedDate":"2022年9月10日","excerpt":"<h1> 介绍</h1>\\n<ol>\\n<li>TypeScript是JavaScript的超集。</li>\\n<li>它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。</li>\\n<li>TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。</li>\\n<li>TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。</li>\\n<li>相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；</li>\\n<li>TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；</li>\\n<li>TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；</li>\\n<li>TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</li>\\n</ol>","autoDesc":true}');export{t as data};
