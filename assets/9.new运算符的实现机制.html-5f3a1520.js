const e=JSON.parse('{"key":"v-252aca60","path":"/qianduan/%E5%9F%BA%E7%A1%80/JS/9.new%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.html","title":"new运算符的实现机制","lang":"zh-CN","frontmatter":{"order":9,"headerDepth":3,"date":"2022-07-23T00:00:00.000Z","readingTime":"N/A","word":"N/A","lastUpdated":true,"article":false,"description":"new运算符的实现机制 首先创建了一个新的空对象 设置原型，将对象的原型设置为函数的prototype对象。 让函数的this指向这个对象，执行构造函数的代码（为这个新对象添加属性） 判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。 相关信息 任何一个函数，如果在前面加了new，那就是构造函数。","head":[["meta",{"property":"og:url","content":"https://q-jj.github.io/knowledge/knowledge/qianduan/%E5%9F%BA%E7%A1%80/JS/9.new%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"湫的知识海洋"}],["meta",{"property":"og:title","content":"new运算符的实现机制"}],["meta",{"property":"og:description","content":"new运算符的实现机制 首先创建了一个新的空对象 设置原型，将对象的原型设置为函数的prototype对象。 让函数的this指向这个对象，执行构造函数的代码（为这个新对象添加属性） 判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。 相关信息 任何一个函数，如果在前面加了new，那就是构造函数。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-29T03:52:20.000Z"}],["meta",{"property":"article:author","content":"Yivn"}],["meta",{"property":"article:published_time","content":"2022-07-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-29T03:52:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"new运算符的实现机制\\",\\"description\\":\\"new运算符的实现机制 首先创建了一个新的空对象 设置原型，将对象的原型设置为函数的prototype对象。 让函数的this指向这个对象，执行构造函数的代码（为这个新对象添加属性） 判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。 相关信息 任何一个函数，如果在前面加了new，那就是构造函数。\\"}"]]},"headers":[],"git":{"createdTime":1703821940000,"updatedTime":1703821940000,"contributors":[{"name":"Q-JJ","email":"J001222@163.com","commits":1}]},"readingTime":{"minutes":0.51,"words":154},"filePathRelative":"qianduan/基础/JS/9.new运算符的实现机制.md","localizedDate":"2022年7月23日","excerpt":"<h1> new运算符的实现机制</h1>\\n<ol>\\n<li>\\n<p>首先创建了一个新的<code>空对象</code></p>\\n</li>\\n<li>\\n<p><code>设置原型</code>，将对象的原型设置为函数的<code>prototype</code>对象。</p>\\n</li>\\n<li>\\n<p>让函数的<code>this</code>指向这个对象，执行构造函数的代码（为这个新对象添加属性）</p>\\n</li>\\n<li>\\n<p>判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</p>\\n</li>\\n</ol>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>任何一个函数，如果在前面加了new，那就是构造函数。</p>\\n</div>","autoDesc":true}');export{e as data};
