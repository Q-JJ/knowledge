const e=JSON.parse('{"key":"v-d4982510","path":"/qianduan/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/Vue/3.Vuex/%E4%BB%8B%E7%BB%8D.html","title":"vuex","lang":"zh-CN","frontmatter":{"icon":"date","order":1,"headerDepth":3,"date":"2022-07-23T00:00:00.000Z","readingTime":"N/A","word":"N/A","lastUpdated":true,"article":false,"description":"vuex 专门在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。 vuex工作原理 State：定义了应用的状态数据 Getter：在 store 中定义“getter”（可以认为是 store 的计算属性），就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来， 且只有当它的依赖值发生了改变才会被重新计算 Mutation：是唯一更改 store 中状态的方法，且必须是同步函数 Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作 Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中","head":[["meta",{"property":"og:url","content":"https://q-jj.github.io/knowledge/knowledge/qianduan/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/Vue/3.Vuex/%E4%BB%8B%E7%BB%8D.html"}],["meta",{"property":"og:site_name","content":"湫的知识海洋"}],["meta",{"property":"og:title","content":"vuex"}],["meta",{"property":"og:description","content":"vuex 专门在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。 vuex工作原理 State：定义了应用的状态数据 Getter：在 store 中定义“getter”（可以认为是 store 的计算属性），就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来， 且只有当它的依赖值发生了改变才会被重新计算 Mutation：是唯一更改 store 中状态的方法，且必须是同步函数 Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作 Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-29T03:52:20.000Z"}],["meta",{"property":"article:author","content":"Yivn"}],["meta",{"property":"article:published_time","content":"2022-07-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-29T03:52:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"vuex\\",\\"description\\":\\"vuex 专门在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。 vuex工作原理 State：定义了应用的状态数据 Getter：在 store 中定义“getter”（可以认为是 store 的计算属性），就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来， 且只有当它的依赖值发生了改变才会被重新计算 Mutation：是唯一更改 store 中状态的方法，且必须是同步函数 Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作 Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中\\"}"]]},"headers":[{"level":2,"title":"用途","slug":"用途","link":"#用途","children":[]}],"git":{"createdTime":1699100698000,"updatedTime":1703821940000,"contributors":[{"name":"Q-JJ","email":"J001222@163.com","commits":2}]},"readingTime":{"minutes":0.98,"words":293},"filePathRelative":"qianduan/框架学习/Vue/3.Vuex/介绍.md","localizedDate":"2022年7月23日","excerpt":"<h1> vuex</h1>\\n<p>专门在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的<span style=\\"color:red\\"><strong>共享状态</strong></span>进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p>\\n<figure><figcaption>vuex工作原理</figcaption></figure>\\n<ol>\\n<li><strong>State</strong>：定义了应用的状态数据</li>\\n<li><strong>Getter</strong>：在 store 中定义“getter”（可以认为是 store 的计算属性），就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来， 且只有当它的依赖值发生了改变才会被重新计算</li>\\n<li><strong>Mutation</strong>：是唯一更改 store 中状态的方法，且必须是同步函数</li>\\n<li><strong>Action</strong>：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作</li>\\n<li><strong>Module</strong>：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中</li>\\n</ol>","autoDesc":true}');export{e as data};
