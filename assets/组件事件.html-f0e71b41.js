const t=JSON.parse(`{"key":"v-2dcacc40","path":"/qianduan/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/Vue/%E9%AB%98%E7%BA%A7%E7%AF%87/%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6.html","title":"组件事件","lang":"zh-CN","frontmatter":{"icon":"date","order":2,"headerDepth":3,"date":"2022-07-23T00:00:00.000Z","readingTime":"N/A","word":"N/A","lastUpdated":true,"article":false,"description":"组件事件 组件的自定义事件 一种组件间通信的方式，适用于：子组件 ===&gt; 父组件 使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（事件的回调在A中）。 绑定自定义事件： 第一种方式，在父组件中：&lt;Demo @atguigu=\\"test\\"/&gt; 或 &lt;Demo v-on:atguigu=\\"test\\"/&gt; 第二种方式，在父组件中： &lt;Demo ref=\\"demo\\"/&gt; ...... mounted(){ this.$refs.xxx.$on('atguigu',this.test) } 若想让自定义事件只能触发一次，可以使用once修饰符，或$once方法。 触发自定义事件：this.$emit('atguigu',数据) 解绑自定义事件：this.$off('atguigu') 组件上也可以绑定原生DOM事件，需要使用native修饰符。 注意：通过this.$refs.xxx.$on('atguigu',回调)绑定自定义事件时，回调要么配置在methods中，要么用箭头函数，否则this指向会出问题！","head":[["meta",{"property":"og:url","content":"https://q-jj.github.io/knowledge/knowledge/qianduan/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/Vue/%E9%AB%98%E7%BA%A7%E7%AF%87/%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"湫的知识海洋"}],["meta",{"property":"og:title","content":"组件事件"}],["meta",{"property":"og:description","content":"组件事件 组件的自定义事件 一种组件间通信的方式，适用于：子组件 ===&gt; 父组件 使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（事件的回调在A中）。 绑定自定义事件： 第一种方式，在父组件中：&lt;Demo @atguigu=\\"test\\"/&gt; 或 &lt;Demo v-on:atguigu=\\"test\\"/&gt; 第二种方式，在父组件中： &lt;Demo ref=\\"demo\\"/&gt; ...... mounted(){ this.$refs.xxx.$on('atguigu',this.test) } 若想让自定义事件只能触发一次，可以使用once修饰符，或$once方法。 触发自定义事件：this.$emit('atguigu',数据) 解绑自定义事件：this.$off('atguigu') 组件上也可以绑定原生DOM事件，需要使用native修饰符。 注意：通过this.$refs.xxx.$on('atguigu',回调)绑定自定义事件时，回调要么配置在methods中，要么用箭头函数，否则this指向会出问题！"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-04T12:24:58.000Z"}],["meta",{"property":"article:author","content":"Yivn"}],["meta",{"property":"article:published_time","content":"2022-07-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-04T12:24:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"组件事件\\",\\"description\\":\\"组件事件 组件的自定义事件 一种组件间通信的方式，适用于：子组件 ===&gt; 父组件 使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（事件的回调在A中）。 绑定自定义事件： 第一种方式，在父组件中：&lt;Demo @atguigu=\\\\\\"test\\\\\\"/&gt; 或 &lt;Demo v-on:atguigu=\\\\\\"test\\\\\\"/&gt; 第二种方式，在父组件中： &lt;Demo ref=\\\\\\"demo\\\\\\"/&gt; ...... mounted(){ this.$refs.xxx.$on('atguigu',this.test) } 若想让自定义事件只能触发一次，可以使用once修饰符，或$once方法。 触发自定义事件：this.$emit('atguigu',数据) 解绑自定义事件：this.$off('atguigu') 组件上也可以绑定原生DOM事件，需要使用native修饰符。 注意：通过this.$refs.xxx.$on('atguigu',回调)绑定自定义事件时，回调要么配置在methods中，要么用箭头函数，否则this指向会出问题！\\"}"]]},"headers":[{"level":2,"title":"组件的自定义事件","slug":"组件的自定义事件","link":"#组件的自定义事件","children":[]},{"level":2,"title":"全局事件总线（GlobalEventBus）","slug":"全局事件总线-globaleventbus","link":"#全局事件总线-globaleventbus","children":[]},{"level":2,"title":"消息订阅与发布（pubsub）","slug":"消息订阅与发布-pubsub","link":"#消息订阅与发布-pubsub","children":[]}],"git":{"createdTime":1699100698000,"updatedTime":1699100698000,"contributors":[{"name":"Q-JJ","email":"J001222@163.com","commits":1}]},"readingTime":{"minutes":2,"words":601},"filePathRelative":"qianduan/框架学习/Vue/高级篇/组件事件.md","localizedDate":"2022年7月23日","excerpt":"<h1> 组件事件</h1>\\n<h2> 组件的自定义事件</h2>\\n<ol>\\n<li>\\n<p>一种组件间通信的方式，适用于：<strong style=\\"color:red\\">子组件 ===&gt; 父组件</strong></p>\\n</li>\\n<li>\\n<p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style=\\"color:red\\">事件的回调在A中</span>）。</p>\\n</li>\\n<li>\\n<p>绑定自定义事件：</p>\\n<ul>\\n<li>\\n<p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=\\"test\\"/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=\\"test\\"/&gt;</code></p>\\n</li>\\n<li>\\n<p>第二种方式，在父组件中：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token operator\\">&lt;</span>Demo ref<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"demo\\"</span><span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token operator\\">...</span><span class=\\"token operator\\">...</span>\\n<span class=\\"token function\\">mounted</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n   <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>$refs<span class=\\"token punctuation\\">.</span>xxx<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">$on</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'atguigu'</span><span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>test<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>触发自定义事件：<code>this.$emit('atguigu',数据)</code></p>\\n</li>\\n<li>\\n<p>解绑自定义事件：<code>this.$off('atguigu')</code></p>\\n</li>\\n<li>\\n<p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p>\\n</li>\\n<li>\\n<p>注意：通过<code>this.$refs.xxx.$on('atguigu',回调)</code>绑定自定义事件时，回调<span style=\\"color:red\\">要么配置在methods中</span>，<span style=\\"color:red\\">要么用箭头函数</span>，否则this指向会出问题！</p>\\n</li>\\n</ol>","autoDesc":true}`);export{t as data};
