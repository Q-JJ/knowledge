import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,f as t}from"./app-131d0148.js";const e={},p=t(`<h1 id="react-拓展" tabindex="-1"><a class="header-anchor" href="#react-拓展" aria-hidden="true">#</a> React 拓展</h1><h2 id="_1-setstate" tabindex="-1"><a class="header-anchor" href="#_1-setstate" aria-hidden="true">#</a> 1. setState</h2><h3 id="_2-种写法" tabindex="-1"><a class="header-anchor" href="#_2-种写法" aria-hidden="true">#</a> 2 种写法</h3><ol><li>对象式：<code>setState(stateChange, [callback])</code><ul><li>stateChange 为状态改变对象(该对象可以体现出状态的更改)</li><li>callback 是可选的回调函数, 它在状态更新完毕、界面也更新后(render 调用后)才被调用</li></ul></li><li>函数式：<code>setState(updater, [callback])</code><ul><li>updater 为返回 stateChange 对象的函数。</li><li>updater 可以接收到 state 和 props。</li><li>callback 是可选的回调函数, 它在状态更新、界面也更新后(render 调用后)才被调用。</li></ul></li></ol><div class="hint-container info"><p class="hint-container-title">总结</p><ol><li><p>对象式的 setState 是函数式的 setState 的简写方式(语法糖)</p></li><li><p>使用原则</p><ul><li>如果新状态不依赖于原状态 ===&gt; 使用对象方式</li><li>如果新状态依赖于原状态 ===&gt; 使用函数方式</li><li>如果需要在 setState()执行后获取最新的状态数据, 要在第二个 callback 函数中读取</li></ul></li></ol></div><h2 id="_2-路由组件-lazyload" tabindex="-1"><a class="header-anchor" href="#_2-路由组件-lazyload" aria-hidden="true">#</a> 2. 路由组件 lazyLoad</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>	<span class="token comment">//1.通过React的lazy函数配合import()函数动态加载路由组件 ===&gt; 路由组件代码会被分开打包</span>
	<span class="token keyword">const</span> Login <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/pages/Login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">//2.通过&lt;Suspense&gt;指定在加载得到路由打包文件前显示一个自定义loading界面</span>
	<span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>loading<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Switch<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/xxx&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Xxxx<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">&quot;/login&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-fragment" tabindex="-1"><a class="header-anchor" href="#_3-fragment" aria-hidden="true">#</a> 3. Fragment</h2><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">//作用：可以不用必须有一个真实的 DOM 根标签了</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-context" tabindex="-1"><a class="header-anchor" href="#_4-context" aria-hidden="true">#</a> 4. Context</h2><p>一种组件间通信方式, 常用于【祖组件】与【后代组件】间通信</p><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 1.创建Context容器对象：</span>
	<span class="token keyword">const</span> XxxContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 2.渲染子组时，外面包裹xxxContext.Provider, 通过value属性给后代组件传递数据：</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xxxContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>数据<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
		子组件
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xxxContext.Provider</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// 3.后代组件读取数据：</span>
	<span class="token comment">//第一种方式:仅适用于类组件</span>
	  <span class="token keyword">static</span> contextType <span class="token operator">=</span> xxxContext  <span class="token comment">// 声明接收context</span>
	  <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token comment">// 读取context中的value数据</span>
	<span class="token comment">//第二种方式: 函数组件与类组件都可以</span>
	  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xxxContext.Consumer</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
	    </span><span class="token punctuation">{</span>
	      <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span> <span class="token comment">// value就是context中的value数据</span>
	        要显示的内容
	      <span class="token punctuation">)</span>
	    <span class="token punctuation">}</span><span class="token plain-text">
	  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xxxContext.Consumer</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-render-props" tabindex="-1"><a class="header-anchor" href="#_6-render-props" aria-hidden="true">#</a> 6. render props</h2><h3 id="如何向组件内部动态传入带内容的结构-标签" tabindex="-1"><a class="header-anchor" href="#如何向组件内部动态传入带内容的结构-标签" aria-hidden="true">#</a> 如何向组件内部动态传入带内容的结构(标签)?</h3><ol><li><p>Vue 中: 使用 slot 技术, 也就是通过组件标签体传入结构 <code>&lt;A&gt;&lt;B/&gt;&lt;/A&gt;</code></p></li><li><p>React 中:</p><ul><li>使用 children props: 通过组件标签体传入结构</li><li>使用 render props: 通过组件标签属性传入结构,而且可以携带数据，一般用 render 函数属性</li></ul></li></ol><h3 id="children-props" tabindex="-1"><a class="header-anchor" href="#children-props" aria-hidden="true">#</a> children props</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">B</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">xxxx</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">B</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">A</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>
    <span class="token comment">//问题: 如果B组件需要A组件内的数据, ==&gt; 做不到</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="render-props" tabindex="-1"><a class="header-anchor" href="#render-props" aria-hidden="true">#</a> render props</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span> <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">C</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">C</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">A</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">//A组件: {this.props.render(内部state数据)}</span>
   	<span class="token comment">//C组件: 读取A组件传入的数据显示 {this.props.data}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),o=[p];function l(c,i){return n(),s("div",null,o)}const d=a(e,[["render",l],["__file","React扩展.html.vue"]]);export{d as default};
